(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.Detector = factory());
}(this, function () { 'use strict';

  /* eslint-disable prefer-destructuring */

  /* eslint-disable prefer-rest-params */

  /* eslint-disable no-restricted-globals */

  /* eslint-disable no-bitwise */
  if (!Array.prototype.map) {
    Object.defineProperty(Array.prototype, 'map', {
      value: function value(arr, iterator) {
        var result = [];

        for (var i = 0; i < arr.length; i += 1) {
          result.push(iterator(arr[i]));
        }

        return result;
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      value: function value(valueToFind, fromIndex) {
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        } // 1. Let O be ? ToObject(this value).


        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // 3. If len is 0, return false.

        if (len === 0) {
          return false;
        } // 4. Let n be ? ToInteger(fromIndex).
        //    (If fromIndex is undefined, this step produces the value 0.)


        var n = fromIndex | 0; // 5. If n ≥ 0, then
        //  a. Let k be n.
        // 6. Else n < 0,
        //  a. Let k be len + n.
        //  b. If k < 0, let k be 0.

        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

        function sameValueZero(x, y) {
          return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
        } // 7. Repeat, while k < len


        while (k < len) {
          // a. Let elementK be the result of ? Get(O, ! ToString(k)).
          // b. If SameValueZero(valueToFind, elementK) is true, return true.
          if (sameValueZero(o[k], valueToFind)) {
            return true;
          } // c. Increase k by 1.


          k++;
        } // 8. Return false


        return false;
      }
    });
  } // Production steps of ECMA-262, Edition 5, 15.4.4.21
  // Reference: http://es5.github.io/#x15.4.4.21
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce


  if (!Array.prototype.reduce) {
    Object.defineProperty(Array.prototype, 'reduce', {
      value: function value(callback
      /*, initialValue*/
      ) {
        if (this === null) {
          throw new TypeError('Array.prototype.reduce called on null or undefined');
        }

        if (typeof callback !== 'function') {
          throw new TypeError(callback + ' is not a function');
        } // 1. Let O be ? ToObject(this value).


        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // Steps 3, 4, 5, 6, 7

        var k = 0;
        var value;

        if (arguments.length === 2) {
          value = arguments[1];
        } else {
          while (k < len && !(k in o)) {
            k++;
          } // 3. If len is 0 and initialValue is not present, throw a TypeError exception.


          if (k >= len) {
            throw new TypeError('Reduce of empty array with no initial value');
          }

          value = o[k++];
        } // 8. Repeat, while k < len


        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kPresent be ? HasProperty(O, Pk).
          // c. If kPresent is true, then
          //    i. Let kValue be ? Get(O, Pk).
          //    ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).
          if (k in o) {
            value = callback(value, o[k], k, o);
          } // d. Increase k by 1.


          k++;
        } // 9. Return accumulator.


        return value;
      }
    });
  }

  if (!String.prototype.includes) {
    Object.defineProperty(String.prototype, 'includes', {
      value: function value(search, start) {
        start = typeof start !== 'number' ? 0 : start;

        if (start + search.length > this.length) {
          return false;
        }

        return this.indexOf(search, start) !== -1;
      }
    });
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var Features =
  /*#__PURE__*/
  function () {
    function Features() {
      _classCallCheck(this, Features);
    }

    _createClass(Features, [{
      key: "isOldBrowser",
      value: function isOldBrowser() {
        return !!/(Android\s(1.|2.))|(Silk\/1.)/i.test(window.navigator.userAgent);
      }
    }, {
      key: "prefixes",
      value: function prefixes(prop) {
        var _document$createEleme = document.createElement('dummy'),
            style = _document$createEleme.style;

        var prefixes = ['Webkit', 'Moz', 'O', 'ms'];
        var ucProp = prop.charAt(0).toUpperCase() + prop.substr(1);
        var props = (prop + ' ' + prefixes.join(ucProp + ' ') + ucProp).split(' ');
        props.forEach(function (value, index) {
          if (style[props[value]] !== undefined) {
            return props[value];
          }

          return null;
        });
      }
    }, {
      key: "css3D",
      get: function get() {
        var el = document.createElement('p');
        var hasCSS3D = false; // Add it to the body to get the computed style.

        document.body.insertBefore(el, null);
        ['-webkit-transform', '-o-transform', '-ms-transform', '-moz-transform', 'transform'].forEach(function (t) {
          if (!!el.style[t]) {
            el.style[t] = 'translate3d(1px,1px,1px)';
            hasCSS3D = window.getComputedStyle(el).getPropertyValue(t);
          }
        });
        document.body.removeChild(el);
        return !!hasCSS3D && hasCSS3D.length > 0 && hasCSS3D !== 'none';
      } // Test if CSS 3D transforms are supported

    }, {
      key: "css3Dtransform",
      get: function get() {
        return !this.isOldBrowser() && this.prefixes('perspective') !== null;
      } // Test if CSS transforms are supported

    }, {
      key: "cssTransform",
      get: function get() {
        return !this.isOldBrowser() && this.prefixes('transformOrigin') !== null;
      } // Test if CSS transitions are supported

    }, {
      key: "cssTransition",
      get: function get() {
        return this.prefixes('transition') !== null;
      } // Test if addEventListener is supported

    }, {
      key: "addEventListener",
      get: function get() {
        return !!window.addEventListener;
      } // Test if querySelectorAll is supported

    }, {
      key: "querySelectorAll",
      get: function get() {
        return !!document.querySelectorAll;
      } // Test if matchMedia is supported

    }, {
      key: "matchMedia",
      get: function get() {
        return !!window.matchMedia;
      } // Test if Device Motion is supported

    }, {
      key: "deviceMotion",
      get: function get() {
        return 'DeviceMotionEvent' in window;
      } // Test if Device Orientation is supported

    }, {
      key: "deviceOrientation",
      get: function get() {
        return 'DeviceOrientationEvent' in window;
      } // Test if Context Menu is supported

    }, {
      key: "contextMenu",
      get: function get() {
        return 'contextMenu' in document && 'HTMLMenuItemElement' in window;
      } // Test if classList API is supported

    }, {
      key: "classList",
      get: function get() {
        return 'classList' in document;
      } // Test if placeholder attribute is supported

    }, {
      key: "placeholder",
      get: function get() {
        return 'placeholder' in document.createElement('input');
      } // Test if localStorage is supported

    }, {
      key: "localStorage",
      get: function get() {
        var test = 'x';

        try {
          window.localStorage.setItem(test, test);
          window.localStorage.removeItem(test);
          return true;
        } catch (err) {
          return false;
        }
      } // Test if History API is supported

    }, {
      key: "historyAPI",
      get: function get() {
        return window.history && 'pushState' in window.history;
      } // Test if ServiceWorkers are supported

    }, {
      key: "serviceWorker",
      get: function get() {
        return 'serviceWorker' in window.navigator;
      } // Test if viewport units are supported

    }, {
      key: "viewportUnit",
      get: function get() {
        var el = document.createElement('dummy');

        try {
          el.style.width = '1vw';
          var test = el.style.width !== '';
          return !!test;
        } catch (err) {
          return false;
        }
      } // Test if REM units are supported

    }, {
      key: "remUnit",
      get: function get() {
        var el = document.createElement('dummy');

        try {
          el.style.width = '1rem';
          var test = el.style.width !== '';
          return !!test;
        } catch (err) {
          return false;
        }
      } // Test if Canvas is supported

    }, {
      key: "canvas",
      get: function get() {
        var el = document.createElement('canvas');
        return !!(el.getContext && el.getContext('2d'));
      } // Test if SVG is supported

    }, {
      key: "svg",
      get: function get() {
        return !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;
      } // Test if WebGL is supported

    }, {
      key: "webGL",
      get: function get() {
        var el = document.createElement('canvas');

        try {
          return !!(window.WebGLRenderingContext && (el.getContext('webgl') || el.getContext('experimental-webgl')));
        } catch (err) {
          return false;
        }
      } // Test if WebVR is supported

    }, {
      key: "webVR",
      get: function get() {
        return !!('getVRDisplays' in window.navigator);
      } // Test if cors is supported

    }, {
      key: "cors",
      get: function get() {
        return 'XMLHttpRequest' in window && 'withCredentials' in new window.XMLHttpRequest();
      } // Tests if touch events are supported, but doesn't necessarily reflect a touchscreen device

    }, {
      key: "touch",
      get: function get() {
        return !!('ontouchstart' in window || window.navigator && window.navigator.msPointerEnabled && window.MSGesture || window.DocumentTouch && document instanceof window.DocumentTouch);
      } // Test if async attribute is supported

    }, {
      key: "async",
      get: function get() {
        return 'async' in document.createElement('script');
      } // Test if defer attribute is supported

    }, {
      key: "defer",
      get: function get() {
        return 'defer' in document.createElement('script');
      } // Test if Geolocation is supported

    }, {
      key: "geolocation",
      get: function get() {
        return 'geolocation' in window.navigator;
      } // Test if img srcset attribute is supported

    }, {
      key: "srcset",
      get: function get() {
        return 'srcset' in document.createElement('img');
      } // Test if img sizes attribute is supported

    }, {
      key: "sizes",
      get: function get() {
        return 'sizes' in document.createElement('img');
      } // Test if Picture element is supported

    }, {
      key: "pictureElement",
      get: function get() {
        return 'HTMLPictureElement' in window;
      }
    }, {
      key: "fullscreen",
      get: function get() {
        var el = document.createElement('canvas');
        return !!el.requestFullscreen || !!el.webkitRequestFullscreen || !!el.msRequestFullscreen || !!el.mozRequestFullScreen;
      }
    }]);

    return Features;
  }();

  /**
  * Get first matched item for a string
  * @param {RegExp} regexp
  * @param {String} ua
  * @return {Array|{index: number, input: string}|*|boolean|string}
  */

  function getFirstMatch(regexp, ua) {
    var match = ua.match(regexp);
    return match && match.length > 0 && match[1] || '';
  }
  /**
   * Get second matched item for a string
   * @param regexp
   * @param {String} ua
   * @return {Array|{index: number, input: string}|*|boolean|string}
   */

  function getSecondMatch(regexp, ua) {
    var match = ua.match(regexp);
    return match && match.length > 1 && match[2] || '';
  }
  function getWindowsVersionName(version) {
    switch (version) {
      case 'NT':
        return 'NT';

      case 'XP':
        return 'XP';

      case 'NT 5.0':
        return '2000';

      case 'NT 5.1':
        return 'XP';

      case 'NT 5.2':
        return '2003';

      case 'NT 6.0':
        return 'Vista';

      case 'NT 6.1':
        return '7';

      case 'NT 6.2':
        return '8';

      case 'NT 6.3':
        return '8.1';

      case 'NT 10.0':
        return '10';

      default:
        return undefined;
    }
  }
  /**
   * Get Android version name
   *    1.5 - Cupcake
   *    1.6 - Donut
   *    2.0 - Eclair
   *    2.1 - Eclair
   *    2.2 - Froyo
   *    2.x - Gingerbread
   *    3.x - Honeycomb
   *    4.0 - Ice Cream Sandwich
   *    4.1 - Jelly Bean
   *    4.4 - KitKat
   *    5.x - Lollipop
   *    6.x - Marshmallow
   *    7.x - Nougat
   *    8.x - Oreo
   *    9.x - ?
   *
   * @example
   *   getAndroidVersionName("7.0") // 'Nougat'
   *
   * @param  {string} version
   * @return {string} versionName
   */

  function getAndroidVersionName(version) {
    var v = version.split('.').splice(0, 2).map(function (s) {
      return parseInt(s, 10) || 0;
    });
    v.push(0);
    if (v[0] === 1 && v[1] < 5) return undefined;
    if (v[0] === 1 && v[1] < 6) return 'Cupcake';
    if (v[0] === 1 && v[1] >= 6) return 'Donut';
    if (v[0] === 2 && v[1] < 2) return 'Eclair';
    if (v[0] === 2 && v[1] === 2) return 'Froyo';
    if (v[0] === 2 && v[1] > 2) return 'Gingerbread';
    if (v[0] === 3) return 'Honeycomb';
    if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';
    if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';
    if (v[0] === 4 && v[1] >= 4) return 'KitKat';
    if (v[0] === 5) return 'Lollipop';
    if (v[0] === 6) return 'Marshmallow';
    if (v[0] === 7) return 'Nougat';
    if (v[0] === 8) return 'Oreo';
    return undefined;
  }
  /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */

  function getVersionPrecision(version) {
    return version.split('.').length;
  }
  /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1
   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1
   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0
   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1
   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0
   *
   * @param {String} versionA versions versions to compare
   * @param {String} versionB versions versions to compare
   * @param {boolean} [isLoose] enable loose comparison
   * @return {Number} comparison result: -1 when versionA is lower,
   * 1 when versionA is bigger, 0 when both equal
   */

  /* eslint consistent-return: 1 */

  function compareVersions(versionA, versionB) {
    var isLoose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
    var versionAPrecision = getVersionPrecision(versionA);
    var versionBPrecision = getVersionPrecision(versionB);
    var precision = Math.max(versionAPrecision, versionBPrecision);
    var lastPrecision = 0;
    var chunks = [versionA, versionB].map(function (version) {
      var delta = precision - getVersionPrecision(version); // 2) "9" -> "9.0" (for precision = 2)

      var _version = version + new Array(delta + 1).join('.0'); // 3) "9.0" -> ["000000000"", "000000009"]


      return _version.split('.').map(function (chunk) {
        return new Array(20 - chunk.length).join('0') + chunk;
      }).reverse();
    }); // adjust precision for loose comparison

    if (isLoose) {
      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);
    } // iterate in reverse order by reversed chunks array


    precision -= 1;

    while (precision >= lastPrecision) {
      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      }

      if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === lastPrecision) {
          // all version chunks are same
          return 0;
        }

        precision -= 1;
      } else if (chunks[0][precision] < chunks[1][precision]) {
        return -1;
      }
    }

    return null;
  }
  /**
   * Merges two or more objects
   * @param {...Object} objs
   * @return {Object}
   */

  function merge() {
    for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {
      objs[_key] = arguments[_key];
    }

    return [].concat(objs).reduce(function (acc, obj) {
      return Object.keys(obj).reduce(function (a, k) {
        acc[k] = acc.hasOwnProperty(k) ? [].concat(acc[k]).concat(obj[k]) : obj[k];
        return acc;
      }, {});
    }, {});
  }

  /**
   * Browsers' descriptors
   *
   * The idea of descriptors is simple. You should know about them two simple things:
   * 1. Every descriptor has a method or property called `test` and a `describe` method.
   * 2. Order of descriptors is important.
   *
   * More details:
   * 1. Method or property `test` serves as a way to detect whether the UA string
   * matches some certain browser or not. The `describe` method helps to make a result
   * object with params that show some browser-specific things: name, version, etc.
   * 2. Order of descriptors is important because a Parser goes through them one by one
   * in course. For example, if you insert Chrome's descriptor as the first one,
   * more then a half of browsers will be described as Chrome, because they will pass
   * the Chrome descriptor's test.
   *
   * Descriptor's `test` could be a property with an array of RegExps, where every RegExp
   * will be applied to a UA string to test it whether it matches or not.
   * If a descriptor has two or more regexps in the `test` array it tests them one by one
   * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.
   *
   * Or `test` could be a method. In that case it gets a Parser instance and should
   * return true/false to get the Parser know if this browser descriptor matches the UA or not.
   */
  var commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
  var browsersList = [
  /* Opera < 13.0 */
  {
    test: [/opera/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Opera'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  },
  /* Opera > 13.0 */
  {
    test: [/opr\/|opios/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Opera'
      };
      var version = getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/SamsungBrowser/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Samsung Internet for Android'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/Whale/i],
    describe: function describe(ua) {
      var browser = {
        name: 'NAVER Whale Browser'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/MZBrowser/i],
    describe: function describe(ua) {
      var browser = {
        name: 'MZ Browser'
      };
      var version = getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/focus/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Focus'
      };
      var version = getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/swing/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Swing'
      };
      var version = getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/coast/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Opera Coast'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/yabrowser/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Yandex Browser'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/ucbrowser/i],
    describe: function describe(ua) {
      var browser = {
        name: 'UC Browser'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/Maxthon|mxios/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Maxthon'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/epiphany/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Epiphany'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/puffin/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Puffin'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/sleipnir/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Sleipnir'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/k-meleon/i],
    describe: function describe(ua) {
      var browser = {
        name: 'K-Meleon'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/micromessenger/i],
    describe: function describe(ua) {
      var browser = {
        name: 'WeChat'
      };
      var version = getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/msie|trident/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Internet Explorer'
      };
      var version = getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/edg([ea]|ios)/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Microsoft Edge'
      };
      var version = getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/vivaldi/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Vivaldi'
      };
      var version = getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/seamonkey/i],
    describe: function describe(ua) {
      var browser = {
        name: 'SeaMonkey'
      };
      var version = getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/sailfish/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Sailfish'
      };
      var version = getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/silk/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Amazon Silk'
      };
      var version = getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/phantom/i],
    describe: function describe(ua) {
      var browser = {
        name: 'PhantomJS'
      };
      var version = getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/slimerjs/i],
    describe: function describe(ua) {
      var browser = {
        name: 'SlimerJS'
      };
      var version = getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe: function describe(ua) {
      var browser = {
        name: 'BlackBerry'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/(web|hpw)[o0]s/i],
    describe: function describe(ua) {
      var browser = {
        name: 'WebOS Browser'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua) || getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/bada/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Bada'
      };
      var version = getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/tizen/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Tizen'
      };
      var version = getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/qupzilla/i],
    describe: function describe(ua) {
      var browser = {
        name: 'QupZilla'
      };
      var version = getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/firefox|iceweasel|fxios/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Firefox'
      };
      var version = getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/chromium/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Chromium'
      };
      var version = getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  }, {
    test: [/chrome|crios|crmo/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Chrome'
      };
      var version = getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  },
  /* Android Browser */
  {
    test: function test(parser) {
      var notLikeAndroid = !parser.test(/like android/i);
      var butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe: function describe(ua) {
      var browser = {
        name: 'Android Browser'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  },
  /* Safari */
  {
    test: [/safari|applewebkit/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Safari'
      };
      var version = getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  },
  /* Googlebot */
  {
    test: [/googlebot/i],
    describe: function describe(ua) {
      var browser = {
        name: 'Googlebot'
      };
      var version = getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || getFirstMatch(commonVersionIdentifier, ua);

      if (version) {
        browser.version = version;
      }

      return browser;
    }
  },
  /* Something else */
  {
    test: [/.*/i],
    describe: function describe(ua) {
      return {
        name: getFirstMatch(/^(.*)\/(.*) /, ua),
        version: getSecondMatch(/^(.*)\/(.*) /, ua)
      };
    }
  }];

  var osParsersList = [
  /* Windows Phone */
  {
    test: [/windows phone/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
      return {
        name: 'Windows Phone',
        version: version
      };
    }
  },
  /* Windows */
  {
    test: [/windows/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
      var versionName = getWindowsVersionName(version);
      return {
        name: 'Windows',
        version: version,
        versionName: versionName
      };
    }
  },
  /* macOS */
  {
    test: [/macintosh/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, '.');
      return {
        name: 'macOS',
        version: version
      };
    }
  },
  /* iOS */
  {
    test: [/(ipod|iphone|ipad)/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, '.');
      return {
        name: 'iOS',
        version: version
      };
    }
  },
  /* Android */
  {
    test: function test(parser) {
      var notLikeAndroid = !parser.test(/like android/i);
      var butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe: function describe(ua) {
      var version = getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
      var versionName = getAndroidVersionName(version);
      var os = {
        name: 'Android',
        version: version
      };

      if (versionName) {
        os.versionName = versionName;
      }

      return os;
    }
  },
  /* WebOS */
  {
    test: [/(web|hpw)[o0]s/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
      var os = {
        name: 'WebOS'
      };

      if (version && version.length) {
        os.version = version;
      }

      return os;
    }
  },
  /* BlackBerry */
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua) || getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua) || getFirstMatch(/\bbb(\d+)/i, ua);
      return {
        name: 'BlackBerry',
        version: version
      };
    }
  },
  /* Bada */
  {
    test: [/bada/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);
      return {
        name: 'Bada',
        version: version
      };
    }
  },
  /* Tizen */
  {
    test: [/tizen/i],
    describe: function describe(ua) {
      var version = getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: 'Tizen',
        version: version
      };
    }
  },
  /* Linux */
  {
    test: [/linux/i],
    describe: function describe() {
      return {
        name: 'Linux'
      };
    }
  }];

  var TYPES_LABELS = {
    tablet: 'tablet',
    mobile: 'mobile',
    desktop: 'desktop'
  };
  /*
   * Tablets go first since usually they have more specific
   * signs to detect.
   */

  var platformParsersList = [
  /* Huawei */
  {
    test: [/huawei/i],
    describe: function describe(ua) {
      var model = getFirstMatch(/(can-l01)/i, ua) && 'Nova';
      var platform = {
        type: TYPES_LABELS.mobile,
        vendor: 'Huawei'
      };

      if (model) {
        platform.model = model;
      }

      return platform;
    }
  },
  /* Nexus Tablet */
  {
    test: [/nexus\s*(?:7|8|9|10).*/i],
    describe: function describe() {
      return {
        type: TYPES_LABELS.tablet,
        vendor: 'Nexus'
      };
    }
  },
  /* iPad */
  {
    test: [/ipad/i],
    describe: function describe() {
      return {
        type: TYPES_LABELS.tablet,
        vendor: 'Apple',
        model: 'iPad'
      };
    }
  },
  /* Amazon Kindle Fire */
  {
    test: [/kftt build/i],
    describe: function describe() {
      return {
        type: TYPES_LABELS.tablet,
        vendor: 'Amazon',
        model: 'Kindle Fire HD 7'
      };
    }
  },
  /* Another Amazon Tablet with Silk */
  {
    test: [/silk/i],
    describe: function describe() {
      return {
        type: TYPES_LABELS.tablet,
        vendor: 'Amazon'
      };
    }
  },
  /* Tablet */
  {
    test: [/tablet/i],
    describe: function describe() {
      return {
        type: TYPES_LABELS.tablet
      };
    }
  },
  /* iPod/iPhone */
  {
    test: function test(parser) {
      var iDevice = parser.test(/ipod|iphone/i);
      var likeIDevice = parser.test(/like (ipod|iphone)/i);
      return iDevice && !likeIDevice;
    },
    describe: function describe(ua) {
      var model = getFirstMatch(/(ipod|iphone)/i, ua);
      return {
        type: TYPES_LABELS.mobile,
        vendor: 'Apple',
        model: model
      };
    }
  },
  /* Nexus Mobile */
  {
    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
    describe: function describe() {
      return {
        type: TYPES_LABELS.mobile,
        vendor: 'Nexus'
      };
    }
  },
  /* Mobile */
  {
    test: [/[^-]mobi/i],
    describe: function describe() {
      return {
        type: TYPES_LABELS.mobile
      };
    }
  },
  /* BlackBerry */
  {
    test: function test(parser) {
      return parser.getBrowserName(true) === 'blackberry';
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.mobile,
        vendor: 'BlackBerry'
      };
    }
  },
  /* Bada */
  {
    test: function test(parser) {
      return parser.getBrowserName(true) === 'bada';
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.mobile
      };
    }
  },
  /* Windows Phone */
  {
    test: function test(parser) {
      return parser.getBrowserName() === 'windows phone';
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.mobile,
        vendor: 'Microsoft'
      };
    }
  },
  /* Android Tablet */
  {
    test: function test(parser) {
      var osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);
      return parser.getOSName(true) === 'android' && osMajorVersion >= 3;
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.tablet
      };
    }
  },
  /* Android Mobile */
  {
    test: function test(parser) {
      return parser.getOSName(true) === 'android';
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.mobile
      };
    }
  },
  /* desktop */
  {
    test: function test(parser) {
      return parser.getOSName(true) === 'macos';
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.desktop,
        vendor: 'Apple'
      };
    }
  },
  /* Windows */
  {
    test: function test(parser) {
      return parser.getOSName(true) === 'windows';
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.desktop
      };
    }
  },
  /* Linux */
  {
    test: function test(parser) {
      return parser.getOSName(true) === 'linux';
    },
    describe: function describe() {
      return {
        type: TYPES_LABELS.desktop
      };
    }
  }];

  /*
   * More specific goes first
   */

  var enginesParsersList = [
  /* EdgeHTML */
  {
    test: function test(parser) {
      return parser.getBrowserName(true) === 'microsoft edge';
    },
    describe: function describe(ua) {
      var version = getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);
      return {
        name: 'EdgeHTML',
        version: version
      };
    }
  },
  /* Trident */
  {
    test: [/trident/i],
    describe: function describe(ua) {
      var engine = {
        name: 'Trident'
      };
      var version = getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
      }

      return engine;
    }
  },
  /* Presto */
  {
    test: function test(parser) {
      return parser.test(/presto/i);
    },
    describe: function describe(ua) {
      var engine = {
        name: 'Presto'
      };
      var version = getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
      }

      return engine;
    }
  },
  /* Gecko */
  {
    test: function test(parser) {
      var isGecko = parser.test(/gecko/i);
      var likeGecko = parser.test(/like gecko/i);
      return isGecko && !likeGecko;
    },
    describe: function describe(ua) {
      var engine = {
        name: 'Gecko'
      };
      var version = getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
      }

      return engine;
    }
  },
  /* Blink */
  {
    test: [/(apple)?webkit\/537\.36/i],
    describe: function describe() {
      return {
        name: 'Blink'
      };
    }
  },
  /* WebKit */
  {
    test: [/(apple)?webkit/i],
    describe: function describe(ua) {
      var engine = {
        name: 'WebKit'
      };
      var version = getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
      }

      return engine;
    }
  }];

  /**
   * UserAgent class.
   * Keep it simple as much as it can be.
   * It's supposed to work with collections of {@link Parser} instances
   * rather then solve one-instance problems.
   * All the one-instance stuff is located in Parser class.
   */

  var UserAgent =
  /*#__PURE__*/
  function () {
    /**
     * Create instance of Parser
     *
     * @param {String} UA User-Agent string
     * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance
     * improvements if you need to make a more particular parsing
     * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}
     *
     * @throw {Error} in case of empty UA String
     *
     * @constructor
     */
    function UserAgent() {
      var UA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var skipParsing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      _classCallCheck(this, UserAgent);

      if (UA === undefined || UA === null || UA === '') {
        throw new Error('UserAgent parameter can\'t be emptymerge');
      }

      this._ua = UA;
      /**
       * @typedef ParsedResult
       * @property {Object} browser
       * @property {String|undefined} [browser.name]
       * Browser name, like `'Chrome'` or `'Internet Explorer'`
       * @property {String|undefined} [browser.version] Browser version as a String `'12.01.45334.10'`
       * @property {Object} os
       * @property {String|undefined} [os.name] OS name, like `'Windows'` or `'macOS'`
       * @property {String|undefined} [os.version] OS version, like `'NT 5.1'` or `'10.11.1'`
       * @property {String|undefined} [os.versionName] OS name, like `'XP'` or `'High Sierra'`
       * @property {Object} platform
       * @property {String|undefined} [platform.type]
       * platform type, can be either `'desktop'`, `'tablet'` or `'mobile'`
       * @property {String|undefined} [platform.vendor] Vendor of the device,
       * like `'Apple'` or `'Samsung'`
       * @property {String|undefined} [platform.model] Device model,
       * like `'iPhone'` or `'Kindle Fire HD 7'`
       * @property {Object} engine
       * @property {String|undefined} [engine.name]
       * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`
       * @property {String|undefined} [engine.version] String version of the engine
       */

      if (skipParsing !== true) {
        this.parse();
      }
    }
    /**
     * Get UserAgent string of current Parser instance
     * @return {String} User-Agent String of the current <Parser> object
     *
     * @public
     */


    _createClass(UserAgent, [{
      key: "getUA",
      value: function getUA() {
        return this._ua;
      }
      /**
       * Test a UA string for a regexp
       * @param {RegExp} regex
       * @return {Boolean}
       */

    }, {
      key: "test",
      value: function test(regex) {
        return regex.test(this._ua);
      }
      /**
       * Get parsed browser object
       * @return {Object}
       */

    }, {
      key: "parseBrowser",
      value: function parseBrowser() {
        var _this = this;

        this.browser = {};
        var browserDescriptor = browsersList.find(function (_browser) {
          if (typeof _browser.test === 'function') {
            return _browser.test(_this);
          }

          if (_browser.test instanceof Array) {
            return _browser.test.some(function (condition) {
              return _this.test(condition);
            });
          }

          throw new Error('Browser\'s test function is not valid');
        });

        if (browserDescriptor) {
          this.browser = browserDescriptor.describe(this.getUA());
        }

        return this.browser;
      }
      /**
       * Get parsed browser object
       * @return {Object}
       *
       * @public
       */

    }, {
      key: "getBrowser",
      value: function getBrowser() {
        if (this.browser) {
          return this.browser;
        }

        return this.parseBrowser();
      }
      /**
       * Get browser's name
       * @return {String} Browser's name or an empty string
       *
       * @public
       */

    }, {
      key: "getBrowserName",
      value: function getBrowserName(toLowerCase) {
        if (toLowerCase) {
          return String(this.getBrowser().name).toLowerCase() || '';
        }

        return this.getBrowser().name || '';
      }
      /**
       * Get browser's version
       * @return {String} version of browser
       *
       * @public
       */

    }, {
      key: "getBrowserVersion",
      value: function getBrowserVersion() {
        return this.getBrowser().version;
      }
      /**
       * Get OS
       * @return {Object}
       *
       * @example
       * this.getOS();
       * {
       *   name: 'macOS',
       *   version: '10.11.12'
       * }
       */

    }, {
      key: "getOS",
      value: function getOS() {
        if (this.os) {
          return this.os;
        }

        return this.parseOS();
      }
      /**
       * Parse OS and save it to this.os
       * @return {*|{}}
       */

    }, {
      key: "parseOS",
      value: function parseOS() {
        var _this2 = this;

        this.os = {};
        var os = osParsersList.find(function (_os) {
          if (typeof _os.test === 'function') {
            return _os.test(_this2);
          }

          if (_os.test instanceof Array) {
            return _os.test.some(function (condition) {
              return _this2.test(condition);
            });
          }

          throw new Error('Browser\'s test function is not valid');
        });

        if (os) {
          this.os = os.describe(this.getUA());
        }

        return this.os;
      }
      /**
       * Get OS name
       * @param {Boolean} [toLowerCase] return lower-cased value
       * @return {String} name of the OS — macOS, Windows, Linux, etc.
       */

    }, {
      key: "getOSName",
      value: function getOSName(toLowerCase) {
        var _this$getOS = this.getOS(),
            name = _this$getOS.name;

        if (toLowerCase) {
          return String(name).toLowerCase() || '';
        }

        return name || '';
      }
      /**
       * Get OS version
       * @return {String} full version with dots ('10.11.12', '5.6', etc)
       */

    }, {
      key: "getOSVersion",
      value: function getOSVersion() {
        return this.getOS().version;
      }
      /**
       * Get parsed platform
       * @return {{}}
       */

    }, {
      key: "getPlatform",
      value: function getPlatform() {
        if (this.platform) {
          return this.platform;
        }

        return this.parsePlatform();
      }
      /**
       * Get platform name
       * @param {Boolean} [toLowerCase=false]
       * @return {*}
       */

    }, {
      key: "getPlatformType",
      value: function getPlatformType() {
        var toLowerCase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        var _this$getPlatform = this.getPlatform(),
            type = _this$getPlatform.type;

        if (toLowerCase) {
          return String(type).toLowerCase() || '';
        }

        return type || '';
      }
      /**
       * Get parsed platform
       * @return {{}}
       */

    }, {
      key: "parsePlatform",
      value: function parsePlatform() {
        var _this3 = this;

        this.platform = {};
        var platform = platformParsersList.find(function (_platform) {
          if (typeof _platform.test === 'function') {
            return _platform.test(_this3);
          }

          if (_platform.test instanceof Array) {
            return _platform.test.some(function (condition) {
              return _this3.test(condition);
            });
          }

          throw new Error('Browser\'s test function is not valid');
        });

        if (platform) {
          this.platform = platform.describe(this.getUA());
        }

        return this.platform;
      }
      /**
       * Get parsed engine
       * @return {{}}
       */

    }, {
      key: "getEngine",
      value: function getEngine() {
        if (this.engine) {
          return this.engine;
        }

        return this.parseEngine();
      }
      /**
       * Get parsed platform
       * @return {{}}
       */

    }, {
      key: "parseEngine",
      value: function parseEngine() {
        var _this4 = this;

        this.engine = {};
        var engine = enginesParsersList.find(function (_engine) {
          if (typeof _engine.test === 'function') {
            return _engine.test(_this4);
          }

          if (_engine.test instanceof Array) {
            return _engine.test.some(function (condition) {
              return _this4.test(condition);
            });
          }

          throw new Error('Browser\'s test function is not valid');
        });

        if (engine) {
          this.engine = engine.describe(this.getUA());
        }

        return this.engine;
      }
      /**
       * Parse full information about the browser
       */

    }, {
      key: "parse",
      value: function parse() {
        this.parseBrowser();
        this.parseOS();
        this.parsePlatform();
        this.parseEngine();
        return this;
      }
      /**
       * Get parsed result
       * @return {ParsedResult}
       */

    }, {
      key: "getResult",
      value: function getResult() {
        /* TODO: Make this function pure, return a new object instead of the reference */
        return this.parsedResult;
      }
      /**
       * Check if parsed browser matches certain conditions
       *
       * @param {Object} checkTree It's one or two layered object,
       * which can include a platform or an OS on the first layer
       * and should have browsers specs on the bottom-laying layer
       *
       * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.
       * Returns `undefined` when the browser is no described in the checkTree object.
       *
       * @example
       * const browser = new Bowser(UA);
       * if (browser.check({chrome: '>118.01.1322' }))
       * // or with os
       * if (browser.check({windows: { chrome: '>118.01.1322' } }))
       * // or with platforms
       * if (browser.check({desktop: { chrome: '>118.01.1322' } }))
       */

    }, {
      key: "satisfies",
      value: function satisfies(checkTree) {
        var _this5 = this;

        var platformsAndOSes = {};
        var platformsAndOSCounter = 0;
        var browsers = {};
        var browsersCounter = 0;
        var allDefinitions = Object.keys(checkTree);
        allDefinitions.forEach(function (key) {
          var currentDefinition = checkTree[key];

          if (typeof currentDefinition === 'string') {
            browsers[key] = currentDefinition;
            browsersCounter += 1;
          } else if (_typeof(currentDefinition) === 'object') {
            platformsAndOSes[key] = currentDefinition;
            platformsAndOSCounter += 1;
          }
        });

        if (platformsAndOSCounter > 0) {
          var platformsAndOSNames = Object.keys(platformsAndOSes);
          var OSMatchingDefinition = platformsAndOSNames.find(function (name) {
            return _this5.isOS(name);
          });

          if (OSMatchingDefinition) {
            var osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);

            if (osResult !== undefined) {
              return osResult;
            }
          }

          var platformMatchingDefinition = platformsAndOSNames.find(function (name) {
            return _this5.isPlatform(name);
          });

          if (platformMatchingDefinition) {
            var platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);

            if (platformResult !== undefined) {
              return platformResult;
            }
          }
        }

        if (browsersCounter > 0) {
          var browserNames = Object.keys(browsers);
          var matchingDefinition = browserNames.find(function (name) {
            return _this5.isBrowser(name);
          });

          if (matchingDefinition !== undefined) {
            return this.compareVersion(browsers[matchingDefinition]);
          }
        }

        return undefined;
      }
    }, {
      key: "isBrowser",
      value: function isBrowser(browserName) {
        return this.getBrowserName(true) === String(browserName).toLowerCase();
      }
    }, {
      key: "compareVersion",
      value: function compareVersion(version) {
        var expectedResults = [0];
        var comparableVersion = version;
        var isLoose = false;
        var currentBrowserVersion = this.getBrowserVersion();

        if (typeof currentBrowserVersion !== 'string') {
          return undefined;
        }

        if (version[0] === '>' || version[0] === '<') {
          comparableVersion = version.substr(1);

          if (version[1] === '=') {
            isLoose = true;
            comparableVersion = version.substr(2);
          } else {
            expectedResults = [];
          }

          if (version[0] === '>') {
            expectedResults.push(1);
          } else {
            expectedResults.push(-1);
          }
        } else if (version[0] === '=') {
          comparableVersion = version.substr(1);
        } else if (version[0] === '~') {
          isLoose = true;
          comparableVersion = version.substr(1);
        }

        return expectedResults.includes(compareVersions(currentBrowserVersion, comparableVersion, isLoose));
      }
    }, {
      key: "isOS",
      value: function isOS(osName) {
        return this.getOSName(true) === String(osName).toLowerCase();
      }
    }, {
      key: "isPlatform",
      value: function isPlatform(platformType) {
        return this.getPlatformType(true) === String(platformType).toLowerCase();
      }
      /**
       * Is anything? Check if the browser is called 'anything',
       * the OS called 'anything' or the platform called 'anything'
       * @param {String} anything
       * @returns {Boolean}
       */

    }, {
      key: "is",
      value: function is(anything) {
        return this.isBrowser(anything) || this.isOS(anything) || this.isPlatform(anything);
      }
      /**
       * Check if any of the given values satifies this.is(anything)
       * @param {String[]} anythings
       * @returns {Boolean}
       */

    }, {
      key: "some",
      value: function some() {
        var _this6 = this;

        var anythings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        return anythings.some(function (anything) {
          return _this6.is(anything);
        });
      }
    }]);

    return UserAgent;
  }();

  var _window = window,
      navigator = _window.navigator;
  var features = new Features();
  var userAgent = new UserAgent();

  var Detector =
  /*#__PURE__*/
  function () {
    function Detector() {
      var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'djs';

      _classCallCheck(this, Detector);

      if (!!cssFlags) {
        this._cssFlags = [];
        this._cssFlagsPrefix = cssFlagsPrefix;
      }

      this.platform = this.getPlatform(cssFlags);
      this.os = this.getOS(cssFlags);
      this.browser = this.getBrowser(cssFlags);
      this.features = this.getFeatures(cssFlags);
      this.audio = this.getAudio(cssFlags);
      this.video = this.getVideo(cssFlags);

      if (!!cssFlags) {
        this.setCssFlags();
      } // const detectorJSStatus = merge(release.version, {
      //   initialized: true,
      // });
      // console.log('DetectorJS initialized', detectorJSStatus);

    }

    _createClass(Detector, [{
      key: "getPlatform",
      value: function getPlatform() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var p = {};

        try {
          // see https://github.com/bestiejs/platform.js/blob/master/doc/README.md#readme
          p = merge(p, {
            // description: platform.description,
            // manufacturer: platform.manufacturer, // eg. 'Apple', 'Archos', 'Amazon', 'Asus', 'Barnes & Noble', 'BlackBerry', 'Google', 'HP', 'HTC', 'LG', 'Microsoft', 'Motorola', 'Nintendo', 'Nokia', 'Samsung' and 'Sony'
            desktop: !userAgent.mobile && !userAgent.tablet,
            phone: userAgent.mobile,
            tablet: userAgent.tablet // desktop: false,
            // pc: false,
            // mac: false,
            // iPhone: false,
            // iPad: false,

          });

          if (!!cssFlags) {
            !!p.desktop && this._cssFlags.push('desktop');
            !!p.phone && this._cssFlags.push('phone');
            !!p.tablet && this._cssFlags.push('tablet');
          }
        } catch (e) {
          throw e;
        }

        return p;
      }
    }, {
      key: "getOS",
      value: function getOS() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var o = {};

        try {
          o = merge(o, {
            // architecture: platform.os.architecture === 32 ? 'x86' : 'x64',
            // name: platform.os.family,
            // version: platform.os.version || userAgent.osversion,
            android: userAgent.android,
            //&& platform.os.family === 'Android',
            bada: userAgent.bada,
            blackberry: userAgent.blackberry,
            chromeOS: userAgent.chromeos,
            firefoxOS: userAgent.firefoxos,
            iOS: userAgent.ios,
            // && platform.os.family === 'iOS',
            linux: userAgent.linux,
            //&& ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE'].includes(platform.os.family),
            macOS: /Mac OS/.test(navigator.UserAgent),
            // && userAgent.mac && ['OS X', 'macOS'].includes(platform.os.family),
            sailfish: userAgent.sailfish,
            tizen: userAgent.tizen,
            windows: userAgent.windows,
            // && ['Windows', 'Windows Server 2008 R2 / 7', 'Windows Server 2008 / Vista', 'Windows XP'].includes(platform.os.family),
            windowsPhone: userAgent.windowsphone // && platform.os.family === 'Windows Phone',

          });

          if (!!cssFlags) {
            !!o.android && this._cssFlags.push('os-android');
            !!o.bada && this._cssFlags.push('os-bada');
            !!o.blackberry && this._cssFlags.push('os-blackberry');
            !!o.chromeOS && this._cssFlags.push('os-chromeos');
            !!o.firefoxOS && this._cssFlags.push('os-firefoxos');
            !!o.iOS && this._cssFlags.push('os-ios');
            !!o.linux && this._cssFlags.push('os-linux');
            !!o.macOS && this._cssFlags.push('os-macos');
            !!o.sailfish && this._cssFlags.push('os-sailfish');
            !!o.tizen && this._cssFlags.push('os-tizen');
            !!o.windows && this._cssFlags.push('os-windows');
            !!o.windowsPhone && this._cssFlags.push('os-windowsphone');
            !!o.version && this._cssFlags.push('os-version-' + o.version);
          }
        } catch (e) {
          throw e;
        }

        return o;
      }
    }, {
      key: "getBrowser",
      value: function getBrowser() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var b = {};

        try {
          b = merge(b, {
            name: userAgent.name,
            // || platform.name,
            version: userAgent.version,
            // WebApp mode in iOS
            webApp: navigator.standalone,
            engine: {
              blink: userAgent.blink,
              // && platform.layout === 'Blink',
              gecko: userAgent.gecko,
              // && platform.layout === 'Gecko',
              trident: userAgent.msie,
              // && platform.layout === 'Trident',
              edgeHTML: userAgent.msedge,
              // && platform.layout === 'EdgeHTML',
              webkit: userAgent.webkit // && platform.layout === 'WebKit',

            },
            android: userAgent.android,
            // native android browser
            arora: /Arora/.test(navigator.UserAgent),
            bada: userAgent.bada,
            // native bada browser
            blackberry: userAgent.blackberry,
            // native blackberry browser
            chrome: userAgent.chrome,
            // && platform.name.includes('Chrome'),
            chromeMobile: userAgent.chrome && userAgent.mobile,
            // && platform.name === 'Chrome Mobile',
            cocoonJS: navigator.isCocoonJS,
            edge: userAgent.msedge,
            // && platform.name === 'Microsoft Edge',
            ejecta: typeof window.ejecta !== 'undefined',
            // electron: platform.name === 'Electron',
            epiphany: /Epiphany/.test(navigator.UserAgent),
            firefox: userAgent.firefox,
            // && platform.name.includes('Firefox'),
            firefoxMobile: userAgent.firefox,
            // && ['Firefox for iOS', 'Firefox Mobile'].includes(platform.name),
            ie: userAgent.msie,
            // && platform.name.includes('IE'),
            ieMobile: userAgent.msie && userAgent.mobile,
            // && platform.name === 'IE Mobile',
            midori: /Midori/.test(navigator.UserAgent),
            opera: userAgent.opera,
            // && platform.name.includes('Opera'),
            operaMobile: userAgent.opera && userAgent.mobile,
            // && ['Opera Mini', 'Opera Mobile'].includes(platform.name),
            phantom: userAgent.phantom,
            // && platform.name === 'PhantomJS',
            safari: userAgent.safari,
            // && platform.name.includes('Safari'),
            safariMobile: /Mobile Safari/.test(navigator.UserAgent) && userAgent.safari && userAgent.ios && userAgent.mobile,
            // && platform.name.includes('Safari'),
            sailfish: userAgent.sailfish,
            seamonkey: userAgent.seamonkey,
            // && platform.name === 'SeaMonkey',
            samsung: userAgent.samsungBrowser,
            // native samsung browser
            silk: userAgent.silk,
            // && platform.name === 'Silk', // native amazon kindle browser
            tizen: userAgent.tizen,
            //- native browser
            webOS: userAgent.webos //- native browser

          });

          if (!!cssFlags) {
            !!b.engine.blink && this._cssFlags.push('engine-blink');
            !!b.engine.gecko && this._cssFlags.push('engine-gecko');
            !!b.engine.trident && this._cssFlags.push('engine-trident');
            !!b.engine.edgeHTML && this._cssFlags.push('engine-edge');
            !!b.engine.webkit && this._cssFlags.push('engine-webkit');
            !!b.android && this._cssFlags.push('browser-android-native');
            !!b.arora && this._cssFlags.push('browser-arora');
            !!b.bada && this._cssFlags.push('browser-bada');
            !!b.blackberry && this._cssFlags.push('browser-blackberry');
            !!b.chrome && this._cssFlags.push('browser-chrome');
            !!b.chromeMobile && this._cssFlags.push('browser-chrome-mobile');
            !!b.cocoonJS && this._cssFlags.push('browser-cocoonjs');
            !!b.edge && this._cssFlags.push('browser-edge');
            !!b.ejecta && this._cssFlags.push('browser-ejecta');
            !!b.electron && this._cssFlags.push('browser-electron');
            !!b.epiphany && this._cssFlags.push('browser-epiphany');
            !!b.firefox && this._cssFlags.push('browser-firefox');
            !!b.firefoxMobile && this._cssFlags.push('browser-firefox-mobile');
            !!b.ie && this._cssFlags.push('browser-ie');
            !!b.ieMobile && this._cssFlags.push('browser-ie-mobile');
            !!b.midori && this._cssFlags.push('browser-midori');
            !!b.opera && this._cssFlags.push('browser-opera');
            !!b.operaMobile && this._cssFlags.push('browser-opera-mobile');
            !!b.phantom && this._cssFlags.push('browser-phantom');
            !!b.safari && this._cssFlags.push('browser-safari');
            !!b.safariMobile && this._cssFlags.push('browser-safari-mobile');
            !!b.sailfish && this._cssFlags.push('browser-sailfish');
            !!b.seamonkey && this._cssFlags.push('browser-seamonkey');
            !!b.samsung && this._cssFlags.push('browser-samsung');
            !!b.silk && this._cssFlags.push('browser-silk');
            !!b.tizen && this._cssFlags.push('browser-tizen');
            !!b.webOS && this._cssFlags.push('browser-webos');
            !!b.version && this._cssFlags.push('browser-version-' + b.version);
          }
        } catch (e) {
          throw e;
        }

        return b;
      }
    }, {
      key: "getAudio",
      value: function getAudio() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var a = {
          audioData: !!window.Audio,
          webAudio: !!(window.webkitAudioContext || window.AudioContext)
        };

        try {
          var audioElement = document.createElement('audio');

          if (!!audioElement.canPlayType) {
            a = merge(a, {
              ogg: audioElement.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '') !== '',
              opus: audioElement.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, '') !== '',
              mp3: audioElement.canPlayType('audio/mpeg;').replace(/^no$/, '') !== '',
              // Mimetypes accepted:
              //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
              //   bit.ly/iphoneoscodecs
              wav: audioElement.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '') !== '',
              m4a: (audioElement.canPlayType('audio/x-m4a;').replace(/^no$/, '') || audioElement.canPlayType('audio/aac;').replace(/^no$/, '')) !== '',
              webm: audioElement.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '') !== ''
            });

            if (!!cssFlags) {
              !!a.ogg && this._cssFlags.push('audio-ogg');
              !!a.opus && this._cssFlags.push('audio-opus');
              !!a.mp3 && this._cssFlags.push('audio-mp3');
              !!a.wav && this._cssFlags.push('audio-wav');
              !!a.m4a && this._cssFlags.push('audio-m4a');
              !!a.webm && this._cssFlags.push('audio-webm');
            }
          }
        } catch (e) {
          throw e;
        }

        return a;
      }
    }, {
      key: "getVideo",
      value: function getVideo() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var v = {};

        try {
          var videoElement = document.createElement('video');

          if (!!videoElement.canPlayType) {
            v = merge(v, {
              mp4: videoElement.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/^no$/, '') !== '',
              ogv: videoElement.canPlayType('video/ogg; codecs="theora, vorbis"').replace(/^no$/, '') !== '',
              webm: videoElement.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '') !== ''
            });

            if (!!cssFlags) {
              !!v.mp4 && this._cssFlags.push('video-mp4');
              !!v.ogv && this._cssFlags.push('video-ogv');
              !!v.webm && this._cssFlags.push('video-webm');
            }
          }
        } catch (e) {
          throw e;
        }

        return v;
      }
    }, {
      key: "getFeatures",
      value: function getFeatures() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var f = {};

        try {
          navigator.vibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate;
          f = merge(f, {
            async: features.async,
            addEventListener: features.addEventListener,
            battery: !!navigator.battery,
            canvas: features.canvas,
            classList: features.classList,
            cors: features.cors,
            contextMenu: features.contextMenu,
            css3D: features.css3Dtransform,
            cssTransform: features.cssTransform,
            cssTransition: features.cssTransition,
            defer: features.defer,
            file: !!window.File && !!window.FileReader && !!window.FileList && !!window.Blob,
            fileSystem: !!window.requestFileSystem,
            fullscreen: features.fullscreen,
            // fullscreenKeyboard: window.Element && Element['ALLOW_KEYBOARD_INPUT'],
            geolocation: features.geolocation,
            getUserMedia: !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia),
            historyAPI: features.historyAPI,
            littleEndian: typeof Int8Array !== 'undefined' && new Int8Array(new Int16Array([1]).buffer)[0] > 0,
            localStorage: features.localStorage,
            matchMedia: features.matchMedia,
            motion: features.deviceMotion,
            mspointer: window.navigator.msPointerEnabled || window.navigator.pointerEnabled,
            orientation: features.deviceOrientation,
            pictureElement: features.pictureElement,
            pixelRatio: window.devicePixelRatio || 1,
            placeholder: features.placeholder,
            pointerLock: 'pointerLockElement' in document || 'mozPointerLockElement' in document || 'webkitPointerLockElement' in document,
            querySelectorAll: features.querySelectorAll,
            quirksMode: document.compatMode !== 'CSS1Compat',
            remUnit: features.remUnit,
            serviceWorker: features.serviceWorker,
            sizes: features.sizes,
            srcset: features.srcset,
            svg: features.svg,
            touch: ('ontouchstart' in document.documentElement || window.navigator.maxTouchPoints && window.navigator.maxTouchPoints > 1) && features.touch,
            typedArray: typeof Int8Array !== 'undefined',
            vibration: navigator.vibrate,
            viewportUnit: features.viewportUnit,
            webGL: features.webGL,
            webVR: features.webVR,
            worker: !!window.Worker
          });

          if (!!cssFlags) {
            !!f.css3D && this._cssFlags.push('feature-css3d');
            !!f.cssTransform && this._cssFlags.push('feature-css-transforms');
            !!f.cssTransition && this._cssFlags.push('feature-css-transitions');
            !!f.fullscreen && this._cssFlags.push('feature-fullscreen');
            !!f.motion && this._cssFlags.push('feature-device-motion');
            !!f.orientation && this._cssFlags.push('feature-device-orientation');
            !!f.pixelRatio && this._cssFlags.push('feature-pixel-ratio-' + f.pixelRatio);
            !!f.remUnit && this._cssFlags.push('feature-rem-unit');
            !!f.touch && this._cssFlags.push('feature-touch');
            !!f.webGL && this._cssFlags.push('feature-webgl');
            !!f.webVR && this._cssFlags.push('feature-webvr');
          }
        } catch (e) {
          throw e;
        }

        return f;
      }
    }, {
      key: "setCssFlags",
      value: function setCssFlags() {
        document.documentElement.className += this._cssFlags.join(' ' + this._cssFlagsPrefix + '-');
      }
    }]);

    return Detector;
  }();

  return Detector;

}));
