(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.Detector = factory());
}(this, function () { 'use strict';

  /* eslint-disable prefer-destructuring */

  /* eslint-disable prefer-rest-params */

  /* eslint-disable no-restricted-globals */

  /* eslint-disable no-bitwise */
  if (!Array.prototype.map) {
    Object.defineProperty(Array.prototype, 'map', {
      value: function value(arr, iterator) {
        var result = [];

        for (var i = 0; i < arr.length; i += 1) {
          result.push(iterator(arr[i]));
        }

        return result;
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      value: function value(valueToFind, fromIndex) {
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        } // 1. Let O be ? ToObject(this value).


        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // 3. If len is 0, return false.

        if (len === 0) {
          return false;
        } // 4. Let n be ? ToInteger(fromIndex).
        //    (If fromIndex is undefined, this step produces the value 0.)


        var n = fromIndex | 0; // 5. If n ≥ 0, then
        //  a. Let k be n.
        // 6. Else n < 0,
        //  a. Let k be len + n.
        //  b. If k < 0, let k be 0.

        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

        function sameValueZero(x, y) {
          return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
        } // 7. Repeat, while k < len


        while (k < len) {
          // a. Let elementK be the result of ? Get(O, ! ToString(k)).
          // b. If SameValueZero(valueToFind, elementK) is true, return true.
          if (sameValueZero(o[k], valueToFind)) {
            return true;
          } // c. Increase k by 1.


          k++;
        } // 8. Return false


        return false;
      }
    });
  } // Production steps of ECMA-262, Edition 5, 15.4.4.21
  // Reference: http://es5.github.io/#x15.4.4.21
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce


  if (!Array.prototype.reduce) {
    Object.defineProperty(Array.prototype, 'reduce', {
      value: function value(callback
      /*, initialValue*/
      ) {
        if (this === null) {
          throw new TypeError('Array.prototype.reduce called on null or undefined');
        }

        if (typeof callback !== 'function') {
          throw new TypeError(callback + ' is not a function');
        } // 1. Let O be ? ToObject(this value).


        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // Steps 3, 4, 5, 6, 7

        var k = 0;
        var value;

        if (arguments.length === 2) {
          value = arguments[1];
        } else {
          while (k < len && !(k in o)) {
            k++;
          } // 3. If len is 0 and initialValue is not present, throw a TypeError exception.


          if (k >= len) {
            throw new TypeError('Reduce of empty array with no initial value');
          }

          value = o[k++];
        } // 8. Repeat, while k < len


        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kPresent be ? HasProperty(O, Pk).
          // c. If kPresent is true, then
          //    i. Let kValue be ? Get(O, Pk).
          //    ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).
          if (k in o) {
            value = callback(value, o[k], k, o);
          } // d. Increase k by 1.


          k++;
        } // 9. Return accumulator.


        return value;
      }
    });
  }

  if (!String.prototype.includes) {
    Object.defineProperty(String.prototype, 'includes', {
      value: function value(search, start) {
        start = typeof start !== 'number' ? 0 : start;

        if (start + search.length > this.length) {
          return false;
        }

        return this.indexOf(search, start) !== -1;
      }
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var FlagsClass =
  /*#__PURE__*/
  function () {
    function FlagsClass() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flags';

      _classCallCheck(this, FlagsClass);

      this._ua = ua;
      this._cssFlagsPrefix = cssFlagsPrefix;
      this._navigator = window.navigator;
      this._document = window.document;
      this._window = window;
    }

    _createClass(FlagsClass, [{
      key: "toFlags",
      value: function toFlags() {
        var _this = this;

        var proto = Object.getPrototypeOf(this);
        return Object.getOwnPropertyNames(proto).filter(function (prop) {
          return !!Object.getOwnPropertyDescriptors(proto)[prop].get;
        }).reduce(function (acc, item) {
          acc[item.toLowerCase()] = _this[item];
          return acc;
        }, {});
      }
    }, {
      key: "toCssFlags",
      value: function toCssFlags() {
        var _this2 = this;

        var proto = Object.getPrototypeOf(this);
        return Object.getOwnPropertyNames(proto).filter(function (prop) {
          return !!Object.getOwnPropertyDescriptors(proto)[prop].get;
        }).reduce(function (acc, item) {
          if (!!_this2[item]) {
            acc.push(_this2._cssFlagsPrefix + '-' + item.toLowerCase());
          }

          return acc;
        }, []);
      }
    }]);

    return FlagsClass;
  }();

  var Features =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(Features, _FlagsClass);

    function Features() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'feature';

      _classCallCheck(this, Features);

      return _possibleConstructorReturn(this, _getPrototypeOf(Features).call(this, ua, cssFlagsPrefix));
    }

    _createClass(Features, [{
      key: "isOldBrowser",
      value: function isOldBrowser() {
        return !!/(Android\s(1.|2.))|(Silk\/1.)/i.test(this._ua);
      }
    }, {
      key: "prefixes",
      value: function prefixes(prop) {
        var _this$_document$creat = this._document.createElement('dummy'),
            style = _this$_document$creat.style;

        var prefixes = ['Webkit', 'Moz', 'O', 'ms'];
        var ucProp = prop.charAt(0).toUpperCase() + prop.substr(1);
        var props = (prop + ' ' + prefixes.join(ucProp + ' ') + ucProp).split(' ');
        props.forEach(function (value, index) {
          if (style[props[value]] !== undefined) {
            return props[value];
          }

          return null;
        });
      }
    }, {
      key: "file",
      get: function get() {
        return !!this._window.File && !!this._window.FileReader && !!this._window.FileList && !!this._window.Blob;
      }
    }, {
      key: "fileSystem",
      get: function get() {
        return !!this._window.requestFileSystem;
      }
    }, {
      key: "getUserMedia",
      get: function get() {
        this._navigator.getUserMedia = this._navigator.getUserMedia || this._navigator.webkitGetUserMedia || this._navigator.mozGetUserMedia || this._navigator.msGetUserMedia;
        return !!this._navigator.getUserMedia;
      }
    }, {
      key: "littleEndian",
      get: function get() {
        return typeof Int8Array !== 'undefined' && new Int8Array(new Int16Array([1]).buffer)[0] > 0;
      }
    }, {
      key: "mspointer",
      get: function get() {
        return this._navigator.msPointerEnabled || this._navigator.pointerEnabled;
      }
    }, {
      key: "pixelRatio",
      get: function get() {
        return this._window.devicePixelRatio || 1;
      }
    }, {
      key: "pointerLock",
      get: function get() {
        return 'pointerLockElement' in this._document || 'mozPointerLockElement' in this._document || 'webkitPointerLockElement' in this._document;
      }
    }, {
      key: "quirksMode",
      get: function get() {
        return this._document.compatMode !== 'CSS1Compat';
      }
    }, {
      key: "typedArray",
      get: function get() {
        return typeof Int8Array !== 'undefined';
      }
    }, {
      key: "vibration",
      get: function get() {
        this._navigator.vibrate = this._navigator.vibrate || this._navigator.webkitVibrate || this._navigator.mozVibrate || this._navigator.msVibrate;
        return this._navigator.vibrate;
      }
    }, {
      key: "worker",
      get: function get() {
        return !!this._window.Worker;
      }
    }, {
      key: "css3D",
      get: function get() {
        var _this = this;

        var el = this._document.createElement('p');

        var hasCSS3D = false; // Add it to the body to get the computed style.

        this._document.body.insertBefore(el, null);

        ['-webkit-transform', '-o-transform', '-ms-transform', '-moz-transform', 'transform'].forEach(function (t) {
          if (!!el.style[t]) {
            el.style[t] = 'translate3d(1px,1px,1px)';
            hasCSS3D = _this._window.getComputedStyle(el).getPropertyValue(t);
          }
        });

        this._document.body.removeChild(el);

        return !!hasCSS3D && hasCSS3D.length > 0 && hasCSS3D !== 'none';
      } // Test if CSS 3D transforms are supported

    }, {
      key: "css3Dtransform",
      get: function get() {
        return !this.isOldBrowser() && this.prefixes('perspective') !== null;
      } // Test if CSS transforms are supported

    }, {
      key: "cssTransform",
      get: function get() {
        return !this.isOldBrowser() && this.prefixes('transformOrigin') !== null;
      } // Test if CSS transitions are supported

    }, {
      key: "cssTransition",
      get: function get() {
        return this.prefixes('transition') !== null;
      } // Test if addEventListener is supported

    }, {
      key: "addEventListener",
      get: function get() {
        return !!this._window.addEventListener;
      } // Test if querySelectorAll is supported

    }, {
      key: "querySelectorAll",
      get: function get() {
        return !!this._document.querySelectorAll;
      } // Test if matchMedia is supported

    }, {
      key: "matchMedia",
      get: function get() {
        return !!this._window.matchMedia;
      }
    }, {
      key: "battery",
      get: function get() {
        return !!this._navigator.battery;
      } // Test if Device Motion is supported

    }, {
      key: "deviceMotion",
      get: function get() {
        return 'DeviceMotionEvent' in this._window;
      } // Test if Device Orientation is supported

    }, {
      key: "deviceOrientation",
      get: function get() {
        return 'DeviceOrientationEvent' in this._window;
      } // Test if Context Menu is supported

    }, {
      key: "contextMenu",
      get: function get() {
        return 'contextMenu' in this._document && 'HTMLMenuItemElement' in this._window;
      } // Test if classList API is supported

    }, {
      key: "classList",
      get: function get() {
        return 'classList' in this._document;
      } // Test if placeholder attribute is supported

    }, {
      key: "placeholder",
      get: function get() {
        return 'placeholder' in this._document.createElement('input');
      } // Test if localStorage is supported

    }, {
      key: "localStorage",
      get: function get() {
        var test = 'x';

        try {
          this._window.localStorage.setItem(test, test);

          this._window.localStorage.removeItem(test);

          return true;
        } catch (err) {
          return false;
        }
      } // Test if History API is supported

    }, {
      key: "historyAPI",
      get: function get() {
        return this._window.history && 'pushState' in this._window.history;
      } // Test if ServiceWorkers are supported

    }, {
      key: "serviceWorker",
      get: function get() {
        return 'serviceWorker' in this._navigator;
      } // Test if viewport units are supported

    }, {
      key: "viewportUnit",
      get: function get() {
        var el = this._document.createElement('dummy');

        try {
          el.style.width = '1vw';
          var test = el.style.width !== '';
          return !!test;
        } catch (err) {
          return false;
        }
      } // Test if REM units are supported

    }, {
      key: "remUnit",
      get: function get() {
        var el = this._document.createElement('dummy');

        try {
          el.style.width = '1rem';
          var test = el.style.width !== '';
          return !!test;
        } catch (err) {
          return false;
        }
      } // Test if Canvas is supported

    }, {
      key: "canvas",
      get: function get() {
        var el = this._document.createElement('canvas');

        return !!(el.getContext && el.getContext('2d'));
      } // Test if SVG is supported

    }, {
      key: "svg",
      get: function get() {
        return !!this._document.createElementNS && !!this._document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;
      } // Test if WebGL is supported

    }, {
      key: "webGL",
      get: function get() {
        var el = this._document.createElement('canvas');

        try {
          return !!(this._window.WebGLRenderingContext && (el.getContext('webgl') || el.getContext('experimental-webgl')));
        } catch (err) {
          return false;
        }
      } // Test if WebVR is supported

    }, {
      key: "webVR",
      get: function get() {
        return !!('getVRDisplays' in this._navigator);
      } // Test if cors is supported

    }, {
      key: "cors",
      get: function get() {
        return 'XMLHttpRequest' in this._window && 'withCredentials' in new this._window.XMLHttpRequest();
      } // Tests if touch events are supported, but doesn't necessarily reflect a touchscreen device

    }, {
      key: "touch",
      get: function get() {
        return ('ontouchstart' in this._document.documentElement || this._navigator.maxTouchPoints && this._navigator.maxTouchPoints > 1) && !!('ontouchstart' in this._window || this._navigator && this._navigator.msPointerEnabled && this._window.MSGesture || this._window.DocumentTouch && this._document instanceof this._window.DocumentTouch);
      } // Test if async attribute is supported

    }, {
      key: "async",
      get: function get() {
        return 'async' in this._document.createElement('script');
      } // Test if defer attribute is supported

    }, {
      key: "defer",
      get: function get() {
        return 'defer' in this._document.createElement('script');
      } // Test if Geolocation is supported

    }, {
      key: "geolocation",
      get: function get() {
        return 'geolocation' in this._navigator;
      } // Test if img srcset attribute is supported

    }, {
      key: "srcset",
      get: function get() {
        return 'srcset' in this._document.createElement('img');
      } // Test if img sizes attribute is supported

    }, {
      key: "sizes",
      get: function get() {
        return 'sizes' in this._document.createElement('img');
      } // Test if Picture element is supported

    }, {
      key: "pictureElement",
      get: function get() {
        return 'HTMLPictureElement' in this._window;
      }
    }, {
      key: "fullscreen",
      get: function get() {
        var el = this._document.createElement('canvas');

        return !!el.requestFullscreen || !!el.webkitRequestFullscreen || !!el.msRequestFullscreen || !!el.mozRequestFullScreen;
      }
    }, {
      key: "fullscreenKeyboard",
      get: function get() {
        return this._window.Element && 'ALLOW_KEYBOARD_INPUT' in this._window.Element;
      }
    }]);

    return Features;
  }(FlagsClass);

  var Engines =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(Engines, _FlagsClass);

    function Engines() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'engine';

      _classCallCheck(this, Engines);

      return _possibleConstructorReturn(this, _getPrototypeOf(Engines).call(this, ua, cssFlagsPrefix));
    }

    _createClass(Engines, [{
      key: "Blink",
      get: function get() {
        var asserts = [!!window.Intl && !!Intl.v8BreakIterator, 'CSS' in window, /webkit\/537\.36.+chrome\/(?!27)/i.test(this._ua)];
        return asserts.every(function (assert) {
          return !!assert;
        });
      }
    }, {
      key: "WebKit",
      get: function get() {
        var asserts = [typeof window.webkitConvertPointFromNodeToPage === 'function', /(?:apple)?webkit\/([\w\.]+)/i.test(this._ua)];
        return asserts.every(function (assert) {
          return !!assert;
        });
      }
    }, {
      key: "Trident",
      get: function get() {
        var asserts = [
        /*@cc_on!@*/
        !!document.documentMode, /(trident)[\/\s]\(?([\w\.]+)/i.test(this._ua)];
        return asserts.every(function (assert) {
          return !!assert;
        });
      }
    }, {
      key: "EdgeHTML",
      get: function get() {
        var asserts = [!!window.StyleMedia, /edge\/(\d+(\.?_?\d+)+)/i.test(this._ua) || /windows.+\sedge\/([\w\.]+)/i.test(this._ua), !this.Trident];
        return asserts.every(function (assert) {
          return !!assert;
        });
      }
    }, {
      key: "Gecko",
      get: function get() {
        var asserts = [typeof InstallTrigger !== 'undefined', /rv\:([\w\.]{1,9}).+(gecko)/i.test(this._ua)];
        return asserts.every(function (assert) {
          return !!assert;
        });
      }
    }, {
      key: "NetFront",
      get: function get() {
        return /(netfront)\/([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "NetSurf",
      get: function get() {
        return /(netsurf)\/([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "Amaya",
      get: function get() {
        return /(amaya)\/([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "KHTML",
      get: function get() {
        return /(khtml)[\/\s]\(?([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "Presto",
      get: function get() {
        return /(presto)\/([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "iCab",
      get: function get() {
        return /(icab)[\/\s]([23]\.[\d\.]+)/i.test(this._ua);
      }
    }, {
      key: "Tasman",
      get: function get() {
        return /(tasman)[\/\s]\(?([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "W3M",
      get: function get() {
        return /(w3m)\/([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "Goanna",
      get: function get() {
        return /(goanna)\/([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "Linx",
      get: function get() {
        return /(lynx)\/([\w\.]+)/i.test(this._ua);
      }
    }, {
      key: "Links",
      get: function get() {
        return /(links)[\/\s]\(?([\w\.]+)/i.test(this._ua);
      }
    }]);

    return Engines;
  }(FlagsClass);

  /**
   * Merges two or more objects
   * @param {...Object} objs
   * @return {Object}
   */

  function merge() {
    for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {
      objs[_key] = arguments[_key];
    }

    return [].concat(objs).reduce(function (acc, obj) {
      return Object.keys(obj).reduce(function (a, k) {
        acc[k] = acc.hasOwnProperty(k) ? [].concat(acc[k]).concat(obj[k]) : obj[k];
        return acc;
      }, {});
    }, {});
  }

  var _window = window,
      navigator = _window.navigator;

  var Detector =
  /*#__PURE__*/
  function () {
    function Detector() {
      var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'djs';
      var ua = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.navigator.userAgent;

      _classCallCheck(this, Detector);

      this._ua = ua;

      if (!!cssFlags) {
        this._cssFlags = [];
        this._cssFlagsPrefix = cssFlagsPrefix;
      }

      this.engines = this.getEngines(cssFlags);
      this.features = this.getFeatures(cssFlags);
      this.platform = this.getPlatform(cssFlags);
      this.os = this.getOS(cssFlags);
      this.browser = this.getBrowser(cssFlags);
      this.audio = this.getAudio(cssFlags);
      this.video = this.getVideo(cssFlags);

      if (!!cssFlags) {
        this.setCssFlags();
      } // const detectorJSStatus = merge(release.version, {
      //   initialized: true,
      // });
      // console.log('DetectorJS initialized', detectorJSStatus);

    }

    _createClass(Detector, [{
      key: "getEngines",
      value: function getEngines() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var engines = new Engines(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(engines.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return engines.toFlags();
      }
    }, {
      key: "getFeatures",
      value: function getFeatures() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var features = new Features(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(features.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return features.toFlags();
      }
    }, {
      key: "getPlatform",
      value: function getPlatform() {
        var p = {};

        try {
          // see https://github.com/bestiejs/platform.js/blob/master/doc/README.md#readme
          p = merge(p, {// description: platform.description,
            // manufacturer: platform.manufacturer, // eg. 'Apple', 'Archos', 'Amazon', 'Asus', 'Barnes & Noble', 'BlackBerry', 'Google', 'HP', 'HTC', 'LG', 'Microsoft', 'Motorola', 'Nintendo', 'Nokia', 'Samsung' and 'Sony'
            // desktop: !userAgent.mobile && !userAgent.tablet,
            // phone: userAgent.mobile,
            // tablet: userAgent.tablet,
            // desktop: false,
            // pc: false,
            // mac: false,
            // iPhone: false,
            // iPad: false,
          });
        } catch (e) {
          throw e;
        }

        return p;
      }
    }, {
      key: "getOS",
      value: function getOS() {
        var o = {};

        try {
          o = merge(o, {// architecture: platform.os.architecture === 32 ? 'x86' : 'x64',
            // name: platform.os.family,
            // version: platform.os.version || userAgent.osversion,
            // android: userAgent.android, //&& platform.os.family === 'Android',
            // bada: userAgent.bada,
            // blackberry: userAgent.blackberry,
            // chromeOS: userAgent.chromeos,
            // firefoxOS: userAgent.firefoxos,
            // iOS: userAgent.ios, // && platform.os.family === 'iOS',
            // linux: userAgent.linux, //&& ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE'].includes(platform.os.family),
            // macOS: /Mac OS/.test(navigator.UserAgent), // && userAgent.mac && ['OS X', 'macOS'].includes(platform.os.family),
            // sailfish: userAgent.sailfish,
            // tizen: userAgent.tizen,
            // windows: userAgent.windows, // && ['Windows', 'Windows Server 2008 R2 / 7', 'Windows Server 2008 / Vista', 'Windows XP'].includes(platform.os.family),
            // windowsPhone: userAgent.windowsphone, // && platform.os.family === 'Windows Phone',
          });
        } catch (e) {
          throw e;
        }

        return o;
      }
    }, {
      key: "getBrowser",
      value: function getBrowser() {
        var b = {};

        try {
          b = merge(b, {// name: userAgent.name, // || platform.name,
            // version: userAgent.version,
            // // WebApp mode in iOS
            // webApp: navigator.standalone,
            // engine: {
            //   blink: userAgent.blink, // && platform.layout === 'Blink',
            //   gecko: userAgent.gecko, // && platform.layout === 'Gecko',
            //   trident: userAgent.msie, // && platform.layout === 'Trident',
            //   edgeHTML: userAgent.msedge, // && platform.layout === 'EdgeHTML',
            //   webkit: userAgent.webkit, // && platform.layout === 'WebKit',
            // },
            // android: userAgent.android, // native android browser
            // arora: /Arora/.test(navigator.UserAgent),
            // bada: userAgent.bada, // native bada browser
            // blackberry: userAgent.blackberry, // native blackberry browser
            // chrome: userAgent.chrome, // && platform.name.includes('Chrome'),
            // chromeMobile: userAgent.chrome && userAgent.mobile, // && platform.name === 'Chrome Mobile',
            // cocoonJS: navigator.isCocoonJS,
            // edge: userAgent.msedge, // && platform.name === 'Microsoft Edge',
            // ejecta: typeof window.ejecta !== 'undefined',
            // // electron: platform.name === 'Electron',
            // epiphany: /Epiphany/.test(navigator.UserAgent),
            // firefox: userAgent.firefox, // && platform.name.includes('Firefox'),
            // firefoxMobile: userAgent.firefox, // && ['Firefox for iOS', 'Firefox Mobile'].includes(platform.name),
            // ie: userAgent.msie, // && platform.name.includes('IE'),
            // ieMobile: userAgent.msie && userAgent.mobile, // && platform.name === 'IE Mobile',
            // midori: /Midori/.test(navigator.UserAgent),
            // opera: userAgent.opera, // && platform.name.includes('Opera'),
            // operaMobile: userAgent.opera && userAgent.mobile, // && ['Opera Mini', 'Opera Mobile'].includes(platform.name),
            // phantom: userAgent.phantom, // && platform.name === 'PhantomJS',
            // safari: userAgent.safari, // && platform.name.includes('Safari'),
            // safariMobile: /Mobile Safari/.test(navigator.UserAgent) && userAgent.safari && userAgent.ios && userAgent.mobile, // && platform.name.includes('Safari'),
            // sailfish: userAgent.sailfish,
            // seamonkey: userAgent.seamonkey, // && platform.name === 'SeaMonkey',
            // samsung: userAgent.samsungBrowser, // native samsung browser
            // silk: userAgent.silk, // && platform.name === 'Silk', // native amazon kindle browser
            // tizen: userAgent.tizen, //- native browser
            // webOS: userAgent.webos, //- native browser
          });
        } catch (e) {
          throw e;
        }

        return b;
      }
    }, {
      key: "getAudio",
      value: function getAudio() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var a = {
          audioData: !!window.Audio,
          webAudio: !!(window.webkitAudioContext || window.AudioContext)
        };

        try {
          var audioElement = document.createElement('audio');

          if (!!audioElement.canPlayType) {
            a = merge(a, {
              ogg: audioElement.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '') !== '',
              opus: audioElement.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, '') !== '',
              mp3: audioElement.canPlayType('audio/mpeg;').replace(/^no$/, '') !== '',
              // Mimetypes accepted:
              //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
              //   bit.ly/iphoneoscodecs
              wav: audioElement.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '') !== '',
              m4a: (audioElement.canPlayType('audio/x-m4a;').replace(/^no$/, '') || audioElement.canPlayType('audio/aac;').replace(/^no$/, '')) !== '',
              webm: audioElement.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '') !== ''
            });

            if (!!cssFlags) {
              !!a.ogg && this._cssFlags.push('audio-ogg');
              !!a.opus && this._cssFlags.push('audio-opus');
              !!a.mp3 && this._cssFlags.push('audio-mp3');
              !!a.wav && this._cssFlags.push('audio-wav');
              !!a.m4a && this._cssFlags.push('audio-m4a');
              !!a.webm && this._cssFlags.push('audio-webm');
            }
          }
        } catch (e) {
          throw e;
        }

        return a;
      }
    }, {
      key: "getVideo",
      value: function getVideo() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var v = {};

        try {
          var videoElement = document.createElement('video');

          if (!!videoElement.canPlayType) {
            v = merge(v, {
              mp4: videoElement.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/^no$/, '') !== '',
              ogv: videoElement.canPlayType('video/ogg; codecs="theora, vorbis"').replace(/^no$/, '') !== '',
              webm: videoElement.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '') !== ''
            });

            if (!!cssFlags) {
              !!v.mp4 && this._cssFlags.push('video-mp4');
              !!v.ogv && this._cssFlags.push('video-ogv');
              !!v.webm && this._cssFlags.push('video-webm');
            }
          }
        } catch (e) {
          throw e;
        }

        return v;
      }
    }, {
      key: "setCssFlags",
      value: function setCssFlags() {
        document.documentElement.className += this._cssFlags.join(' ' + this._cssFlagsPrefix + '-').trim();
      }
    }]);

    return Detector;
  }();

  return Detector;

}));
