(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.Detector = factory());
}(this, function () { 'use strict';

  /* eslint-disable prefer-destructuring */

  /* eslint-disable prefer-rest-params */

  /* eslint-disable no-restricted-globals */

  /* eslint-disable no-bitwise */
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: function value(target, firstSource) {
        if (target === undefined || target === null) {
          throw new TypeError('Cannot convert first argument to object');
        }

        var to = Object(target);

        for (var i = 1; i < arguments.length; i++) {
          var nextSource = arguments[i];

          if (nextSource === undefined || nextSource === null) {
            // eslint-disable-next-line no-continue
            continue;
          }

          nextSource = Object(nextSource);
          var keysArray = Object.keys(Object(nextSource));

          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

            if (desc !== undefined && desc.enumerable) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }

        return to;
      }
    });
  }

  if (!Object.prototype.merge) {
    Object.defineProperty(Object.prototype, 'merge', {
      value: function value() {
        for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {
          objs[_key] = arguments[_key];
        }

        var mergeObj = [this].concat(objs).reduce(function (acc, obj) {
          return Object.keys(obj).reduce(function (a, k) {
            if (acc.hasOwnProperty(k)) {
              if (acc[k] instanceof Array) {
                acc[k] = [].concat(acc[k], obj[k]);
              } else if (acc[k] instanceof Object && Object.keys(acc[k]).length > 0 && obj[k] instanceof Object && Object.keys(obj[k]).length > 0) {
                acc[k].merge(obj[k]);
              } else {
                acc[k] = obj[k];
              }
            } else {
              acc[k] = obj[k];
            }

            return acc;
          }, {});
        }, {});
        return Object.assign(this, mergeObj);
      }
    });
  }

  if (!Array.prototype.map) {
    Object.defineProperty(Array.prototype, 'map', {
      value: function value(arr, iterator) {
        var result = [];

        for (var i = 0; i < arr.length; i += 1) {
          result.push(iterator(arr[i]));
        }

        return result;
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      value: function value(valueToFind, fromIndex) {
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        } // 1. Let O be ? ToObject(this value).


        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // 3. If len is 0, return false.

        if (len === 0) {
          return false;
        } // 4. Let n be ? ToInteger(fromIndex).
        //    (If fromIndex is undefined, this step produces the value 0.)


        var n = fromIndex | 0; // 5. If n ≥ 0, then
        //  a. Let k be n.
        // 6. Else n < 0,
        //  a. Let k be len + n.
        //  b. If k < 0, let k be 0.

        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

        function sameValueZero(x, y) {
          return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
        } // 7. Repeat, while k < len


        while (k < len) {
          // a. Let elementK be the result of ? Get(O, ! ToString(k)).
          // b. If SameValueZero(valueToFind, elementK) is true, return true.
          if (sameValueZero(o[k], valueToFind)) {
            return true;
          } // c. Increase k by 1.


          k++;
        } // 8. Return false


        return false;
      }
    });
  } // Production steps of ECMA-262, Edition 5, 15.4.4.21
  // Reference: http://es5.github.io/#x15.4.4.21
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce


  if (!Array.prototype.reduce) {
    Object.defineProperty(Array.prototype, 'reduce', {
      value: function value(callback
      /*, initialValue*/
      ) {
        if (this === null) {
          throw new TypeError('Array.prototype.reduce called on null or undefined');
        }

        if (typeof callback !== 'function') {
          throw new TypeError(callback + ' is not a function');
        } // 1. Let O be ? ToObject(this value).


        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // Steps 3, 4, 5, 6, 7

        var k = 0;
        var value;

        if (arguments.length === 2) {
          value = arguments[1];
        } else {
          while (k < len && !(k in o)) {
            k++;
          } // 3. If len is 0 and initialValue is not present, throw a TypeError exception.


          if (k >= len) {
            throw new TypeError('Reduce of empty array with no initial value');
          }

          value = o[k++];
        } // 8. Repeat, while k < len


        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kPresent be ? HasProperty(O, Pk).
          // c. If kPresent is true, then
          //    i. Let kValue be ? Get(O, Pk).
          //    ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).
          if (k in o) {
            value = callback(value, o[k], k, o);
          } // d. Increase k by 1.


          k++;
        } // 9. Return accumulator.


        return value;
      }
    });
  }

  if (!String.prototype.includes) {
    Object.defineProperty(String.prototype, 'includes', {
      value: function value(search, start) {
        start = typeof start !== 'number' ? 0 : start;

        if (start + search.length > this.length) {
          return false;
        }

        return this.indexOf(search, start) !== -1;
      }
    });
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var FlagsClass =
  /*#__PURE__*/
  function () {
    function FlagsClass() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flags';

      _classCallCheck(this, FlagsClass);

      this._ua = ua;
      this._cssFlagsPrefix = cssFlagsPrefix;
    }

    _createClass(FlagsClass, [{
      key: "toFlags",
      value: function toFlags() {
        var _this = this;

        var proto = Object.getPrototypeOf(this);
        return Object.getOwnPropertyNames(proto).filter(function (prop) {
          return !!Object.getOwnPropertyDescriptors(proto)[prop].get;
        }).reduce(function (acc, prop) {
          acc[prop] = _this[prop];
          return acc;
        }, {}).merge(Object.getOwnPropertyNames(this).filter(function (prop) {
          return !prop.startsWith('_') && !Object.getOwnPropertyDescriptor(_this, prop).get;
        }).reduce(function (acc, prop) {
          acc[prop] = _this[prop];
          return acc;
        }, {}));
      }
    }, {
      key: "toCssFlags",
      value: function toCssFlags() {
        var _this2 = this;

        var proto = Object.getPrototypeOf(this);
        return Object.getOwnPropertyNames(proto).filter(function (prop) {
          return !!Object.getOwnPropertyDescriptors(proto)[prop].get;
        }).reduce(function (acc, item) {
          if (!!_this2[item]) {
            acc.push((_this2._cssFlagsPrefix + '--' + item + (typeof _this2[item] !== 'boolean' ? '--' + _this2[item] : '')).toLowerCase());
          }

          return acc;
        }, []);
      }
    }]);

    return FlagsClass;
  }();

  var Asserts =
  /*#__PURE__*/
  function () {
    function Asserts() {
      _classCallCheck(this, Asserts);
    }

    _createClass(Asserts, null, [{
      key: "all",
      value: function all() {
        var asserts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var safe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!safe) {
          return asserts.every(function (assert) {
            return !!assert;
          });
        }

        try {
          return asserts.every(function (assert) {
            return !!assert;
          });
        } catch (e) {
          return false;
        }
      }
    }, {
      key: "one",
      value: function one() {
        var asserts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var safe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!safe) {
          return asserts.some(function (assert) {
            return !!assert;
          });
        }

        try {
          return asserts.some(function (assert) {
            return !!assert;
          });
        } catch (e) {
          return false;
        }
      }
    }]);

    return Asserts;
  }();

  var CPU =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(CPU, _FlagsClass);

    function CPU() {
      var _this;

      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'cpu';

      _classCallCheck(this, CPU);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CPU).call(this, ua, cssFlagsPrefix));
      _this.platform = _this.getPlatform();
      _this.cores = _this.getCores();
      _this.architecture = _this.getArchitecture();
      _this.vendor = {
        sparc: _this.getSparc(),
        irix: _this.getIrix(),
        mips: _this.getMips(),
        risc: _this.getRisc(),
        avr: _this.getAvr(),
        arm: _this.getArm(),
        powerPC: _this.getPowerPC(),
        amd: _this.getAmd(),
        intel: _this.getIntel()
      };
      return _this;
    }

    _createClass(CPU, [{
      key: "getCores",
      value: function getCores() {
        return window.navigator.hardwareConcurrency || 1;
      }
    }, {
      key: "getPlatform",
      value: function getPlatform() {
        return window.navigator.platform || 'Win32';
      }
    }, {
      key: "getArchitecture",
      value: function getArchitecture() {
        window.navigator.cpuClass = window.navigator.cpuClass || 'x86';

        if (Asserts.one([window.navigator.cpuClass === 'x64', ['Win64', 'MacIntel', 'Linux x86_64', 'Linux i686'].includes(window.navigator.platform), /(?:x86_64|x86-64|win64|wow64|x64;|amd64|arm64|ia64|sparc64|ppc64|mips64|pa-risc64|irix64|ppc64|powerpc64)/i.test(this._ua)])) {
          window.navigator.cpuClass = 'x64';
        }

        return window.navigator.cpuClass;
      }
    }, {
      key: "getSparc",
      value: function getSparc() {
        return Asserts.one([/(sun4\w)[;\)]/i.test(this._ua), /sparc(?:64)?(?=;);/i.test(this._ua)]);
      }
    }, {
      key: "getIrix",
      value: function getIrix() {
        return Asserts.all([/irix(?:64)?(?=;);/i.test(this._ua)]);
      }
    }, {
      key: "getMips",
      value: function getMips() {
        return Asserts.all([/mips(?:64)?(?=;);/i.test(this._ua)]);
      }
    }, {
      key: "getRisc",
      value: function getRisc() {
        return Asserts.all([/pa-risc(?:64)?(?=;);/i.test(this._ua)]);
      }
    }, {
      key: "getAvr",
      value: function getAvr() {
        return Asserts.all([/(?=atmel\s)avr/i.test(this._ua)]);
      }
    }, {
      key: "getArm",
      value: function getArm() {
        return Asserts.one([/windows\s(ce|mobile);\sppc;/i.test(this._ua), /arm(?:64|(?=v\d+[;l]))/i.test(this._ua)]);
      }
    }, {
      key: "getPowerPC",
      value: function getPowerPC() {
        return Asserts.one([/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i.test(this._ua), window.navigator.platform === 'MacPPC']);
      }
    }, {
      key: "getAmd",
      value: function getAmd() {
        return Asserts.one([/(?:(amd(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i.test(this._ua), window.navigator.cpuClass === 'x64' || window.navigator.platform === 'Linux x86_64']) || Asserts.one([/(?:(amd(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i.test(this._ua), /((?:i[346]|x)86)[;\)]/i.test(this._ua), window.navigator.cpuClass === 'x86']);
      }
    }, {
      key: "getIntel",
      value: function getIntel() {
        return Asserts.one([/(?:avr32|ia64(?=;))|68k(?=\))/i.test(this._ua), /(?:(x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i.test(this._ua), window.navigator.cpuClass === 'x64' || window.navigator.platform === 'MacIntel' || window.navigator.platform === 'Linux x86_64']) || Asserts.one([/(?:(x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i.test(this._ua), /(ia32(?=;))/i.test(this._ua), /((?:i[346]|x)86)[;\)]/i.test(this._ua), window.navigator.cpuClass === 'x86']);
      }
    }]);

    return CPU;
  }(FlagsClass);

  var GPU =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(GPU, _FlagsClass);

    function GPU() {
      var _this;

      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'gpu';

      _classCallCheck(this, GPU);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GPU).call(this, ua, cssFlagsPrefix));
      _this._info = _this.getInfo();
      _this.webGLVendor = _this._info.webGLVendor;
      _this.webGLRenderer = _this._info.webGLRenderer;
      _this.vendor = _this._info.vendor;
      _this.model = _this._info.model;
      _this.renderer = _this._info.renderer;
      return _this;
    }

    _createClass(GPU, [{
      key: "getInfo",
      value: function getInfo() {
        var info = {
          webGLVendor: 'u/a',
          webGLRenderer: 'u/a',
          vendor: 'u/a',
          model: 'u/a',
          renderer: 'u/a'
        };

        try {
          var canvas = document.createElement('canvas');
          var webGLContext = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');

          if (webGLContext) {
            var dbgRenderInfo = webGLContext.getExtension('WEBGL_debug_renderer_info');

            if (dbgRenderInfo != null) {
              info.merge({
                vendor: webGLContext.getParameter(dbgRenderInfo.UNMASKED_VENDOR_WEBGL),
                model: webGLContext.getParameter(dbgRenderInfo.UNMASKED_RENDERER_WEBGL).replace(' OpenGL Engine', ''),
                renderer: webGLContext.getParameter(dbgRenderInfo.UNMASKED_RENDERER_WEBGL)
              });
            }

            info.merge({
              webGLVendor: webGLContext.getParameter(webGLContext.VENDOR),
              webGLRenderer: webGLContext.getParameter(webGLContext.RENDERER)
            });
          }
        } catch (e) {
          console.warn('webGL is not supported', e.message);
        }

        return info;
      }
    }]);

    return GPU;
  }(FlagsClass);

  var OS =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(OS, _FlagsClass);

    function OS() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'os';

      _classCallCheck(this, OS);

      return _possibleConstructorReturn(this, _getPrototypeOf(OS).call(this, ua, cssFlagsPrefix));
    }

    _createClass(OS, [{
      key: "_getVersionNames",
      value: function _getVersionNames() {
        var versionNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (!!version) {
          version = version.replace(/_/ig, '.');
          return Object.getOwnPropertyNames(versionNames).filter(function (versionName) {
            return !!versionNames[versionName];
          })[0] || 'u/a';
        }

        return 'u/a';
      } //! Desktop OSs

    }, {
      key: "_getWindowsVersionName",
      value: function _getWindowsVersionName() {
        var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RegExp.$1 || null;
        return this._getVersionNames({
          'CE': /CE/i.test(version),
          '95': /95/i.test(version),
          '98': /98/i.test(version),
          'ME': /ME/i.test(version),
          '2000': /NT(\s)?5\.0/i.test(version),
          'XP': /NT(\s)?5\.1/i.test(version) || /XP/i.test(version),
          '2003': /NT(\s)?5\.2/i.test(version),
          'Vista': /NT(\s)?6\.0/i.test(version),
          '7': /NT(\s)?6\.1/i.test(version),
          '8': /NT(\s)?6\.2/i.test(version),
          '8.1': /NT(\s)?6\.3/i.test(version),
          '10': /NT(\s)?6\.4/i.test(version) || /NT(\s)?10\.0/i.test(version),
          'RT': /ARM/.test(version)
        }, version);
      }
    }, {
      key: "_getMacOSVersionName",
      value: function _getMacOSVersionName() {
        var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RegExp.$1 || null;
        return this._getVersionNames({
          // source https://en.wikipedia.org/wiki/Mac_OS_8
          'Tempo': /^8\.0(\.+\d)?$/i.test(version),
          'Bride of Buster': /^8\.1(\.+\d)?$/i.test(version),
          'Allegro': /^8\.5(\.+\d)?$/i.test(version),
          'Veronica': /^8\.6(\.+\d)?$/i.test(version),
          // source https://en.wikipedia.org/wiki/Mac_OS_9
          'Sonata': /^9\.0(\.+[012356789])?$/i.test(version),
          'Minuet': /^9\.0\.4$/i.test(version),
          'Fortissimo': /^9\.1(\.+\d)?$/i.test(version),
          'Moonlight': /^9\.2(\.+[023456789])?$/i.test(version),
          'Limelight': /^9\.2\.1$/i.test(version),
          // source https://en.wikipedia.org/wiki/List_of_Apple_operating_systems
          'Cheetah': /^10\.0(\.+\d)?$/i.test(version),
          'Puma': /^10\.1(\.+\d)?$/i.test(version),
          'Jaguar': /^10\.2(\.+\d)?$/i.test(version),
          'Panther': /^10\.3(\.+\d)?$/i.test(version),
          'Tiger': /^10\.4(\.+\d)?$/i.test(version),
          'Leopard': /^10\.5(\.+\d)?$/i.test(version),
          'Snow Leopard': /^10\.6(\.+\d)?$/i.test(version),
          'Lion': /^10\.7(\.+\d)?$/i.test(version),
          'Mountain Lion': /^10\.8(\.+\d)?$/i.test(version),
          'Mavericks': /^10\.9(\.+\d)?$/i.test(version),
          'Yosemite': /^10\.10(\.+\d)?$/i.test(version),
          'El Capitan': /^10\.11(\.+\d)?$/i.test(version),
          'Sierra': /^10\.12(\.+\d)?$/i.test(version),
          'High Sierra': /^10\.13(\.+\d)?$/i.test(version),
          'Mojave': /^10\.14(\.+\d)?$/i.test(version)
        }, version);
      }
    }, {
      key: "_getAndroidVersionName",
      value: function _getAndroidVersionName() {
        var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RegExp.$1 || null;
        return this._getVersionNames({
          '1.0': /^1\.[01234]$/i.test(version),
          'Cupcake': /^1\.5(\.+\d)?$/i.test(version),
          'Donut': /^1\.6(\.+\d)?$/i.test(version),
          'Eclair': /^2\.[01](\.+\d)?$/i.test(version),
          'Froyo': /^2\.2(\.+\d)?$/i.test(version),
          'Gingerbread': /^2\.3(\.+\d)?$/i.test(version),
          'Honeycomb': /^3(\.+\d)(\.+\d)?$/i.test(version),
          'Ice Cream Sandwich': /^4\.[01](\.+\d)?$/i.test(version),
          'Jelly Bean': /^4\.[23](\.+\d)?$/i.test(version),
          'KitKat': /^4\.[456789](\.+\d)?$/i.test(version),
          'Lollipop': /^5(\.\d)(\.+\d)?$/i.test(version),
          'Marshmallow': /^6(\.\d)(\.+\d)?$/i.test(version),
          'Nougat': /^7(\.\d)(\.+\d)?$/i.test(version),
          'Oreo': /^8(\.\d)(\.+\d)?$/i.test(version),
          'Pie': /^9(\.\d)(\.+\d)?$/i.test(version)
        }, version);
      }
    }, {
      key: "_checkAssertsResult",
      value: function _checkAssertsResult() {
        var assertsResult = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var versionNameFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        if (assertsResult) {
          this.setVersion(version);

          if (versionNameFn instanceof Function) {
            this._versionName = versionNameFn.call(this, this.version);
          }

          return true;
        }

        return false;
      }
    }, {
      key: "setVersion",
      value: function setVersion() {
        var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        this._version = version || RegExp.$1 || 'u/a';
      }
    }, {
      key: "Windows",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/Win/i.test(this._ua)]) && Asserts.one([/Windows ((NT|XP)( \d\d?.\d)?)/i.test(this._ua)]), null, this._getWindowsVersionName);
      }
    }, {
      key: "macOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!this.iOS, !/Mobile\//i.test(this._ua), /Mac/i.test(this._ua), !/like Mac/i.test(this._ua)]) && Asserts.one([/(macintosh|mac(?=_powerpc)\s)/i.test(this._ua), /(mac\sos\sx)\s?([\w\s\.]*)/i.test(this._ua)]) && Asserts.one([/Mac[ +]OS[ +]X(?:[ /](?:Version )?(\d+(?:[_\.]\d+)+))?/i.test(this._ua), /Mac (\d+(?:[_\.]\d+)+)/i.test(this._ua), /mac os x (\d+(\.?_?\d+)+)/i.test(this._ua)]), null, this._getMacOSVersionName);
      }
    }, {
      key: "Unix",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/X11/i.test(this._ua)]) && Asserts.one([/(unix)\s?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "Linux",
      get: function get() {
        return Asserts.all([!this.Android, /Linux/i.test(this._ua)]);
      }
    }, {
      key: "ChromiumOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(cros)\s[\w]+\s([\w\.]+\w)/i.test(this._ua)]));
      }
    }, {
      key: "Solaris",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(sunos)\s?([\w\.\d]*)/i.test(this._ua), /((?:open)?solaris)[\/\s-]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "Plan9",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(plan\s9)/i.test(this._ua)]));
      }
    }, {
      key: "Minix",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(minix)/i.test(this._ua)]));
      }
    }, {
      key: "BeOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(beos)/i.test(this._ua)]));
      }
    }, {
      key: "OS2",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(os\/2)/i.test(this._ua)]));
      }
    }, {
      key: "AmigaOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(amigaos)/i.test(this._ua)]));
      }
    }, {
      key: "MorphOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(morphos)/i.test(this._ua)]));
      }
    }, {
      key: "RISCOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(risc\sos)/i.test(this._ua)]));
      }
    }, {
      key: "OpenVMS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(openvms)/i.test(this._ua)]));
      }
    }, {
      key: "Fuchsia",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(fuchsia)/i.test(this._ua)]));
      } //! Mobile OSs

    }, {
      key: "WindowMobile",
      get: function get() {
        // a.k.a. WindowsPhone
        return this._checkAssertsResult(Asserts.one([/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i.test(this._ua), /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i.test(this._ua), /windows phone (?:os)?\s?(\d+(\.\d+)*)/i.test(this._ua)]));
      }
    }, {
      key: "iOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!window.MSStream, /iPad|iPhone|iPod/i.test(this._ua)]) && Asserts.one([/(?:CPU OS|iP(?:ad|hone|od)?[ _]OS|iOS)[ _/](\d+(?:[_\.]\d+)*)/i.test(this._ua), /ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i.test(this._ua), /os (\d+([_\s]\d+)*) like mac os x/i.test(this._ua)]));
      }
    }, {
      key: "Android",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/android[\s/-](\d+(\.\d+)*)/i.test(this._ua)]), null, this._getAndroidVersionName);
      }
    }, {
      key: "Bada",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/bada\/(\d+(\.\d+)*)/i.test(this._ua)]));
      }
    }, {
      key: "Blackberry",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/blackberry|\bbb\d+/i.test(this._ua), /rim\stablet/i.test(this._ua)]) && Asserts.one([/rim\stablet\sos\s(\d+(\.\d+)*)/i.test(this._ua), /blackberry\d+\/(\d+([_\s]\d+)*)/i.test(this._ua), /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i.test(this._ua), /(blackberry)\w*\/?([\w\.]*)/i.test(this._ua), /\bbb(\d+)/i.test(this._ua)]));
      }
    }, {
      key: "Symbian",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i.test(this._ua)]));
      } //! TV OSs

    }, {
      key: "Tizen",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/tizen[/\s](\d+(\.\d+)*)/i.test(this._ua), /(tizen)[\/\s]([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "WebOS",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(web|hpw)[o0]s/i.test(this._ua)]) && Asserts.one([/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i.test(this._ua), /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i.test(this._ua)]));
      }
    }, {
      key: "version",
      get: function get() {
        return this._version.replace(/_/ig, '.');
      }
    }, {
      key: "versionName",
      get: function get() {
        return this._versionName;
      }
    }]);

    return OS;
  }(FlagsClass);

  var Browsers =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(Browsers, _FlagsClass);

    function Browsers() {
      var _this;

      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'browser';

      _classCallCheck(this, Browsers);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Browsers).call(this, ua, cssFlagsPrefix));
      _this._versionDefaultRegEx = /version\/(\d+(\.?_?\d+)+)/i;

      _this._ua.match(_this._versionDefaultRegEx);

      _this.setVersion();

      return _this;
    }

    _createClass(Browsers, [{
      key: "_checkAssertsResult",
      value: function _checkAssertsResult() {
        var assertsResult = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var inverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        if (assertsResult) {
          this.setVersion(version, inverted);
          return true;
        }

        return false;
      }
    }, {
      key: "setVersion",
      value: function setVersion() {
        var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var inverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (inverted) {
          version = version || this._version || RegExp.$1 || 'u/a';
        } else {
          version = version || RegExp.$1 || this._version || 'u/a';
        }

        this._version = version;
      }
    }, {
      key: "Amaya",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(amaya)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Arora",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(arora)\/v?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Avant",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(avant\s)(?:browser)?[\/\s]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "AndroidBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!/like android/i.test(this._ua), /android/i.test(this._ua)]) && Asserts.one([/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i.test(this._ua), /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i.test(this._ua)]));
      }
    }, {
      key: "Baidu",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(baidu)(?:browser)?[\/\s]?([\w\.]*)/i.test(this._ua), /(BIDUBrowser)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Basilisk",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(basilisk)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "BlackBerry",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/blackberry|\bbb\d+/i.test(this._ua), /rim\stablet/i.test(this._ua)]) && Asserts.all([/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i.test(this._ua)]), true);
      }
    }, {
      key: "Blazer",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(blazer)[\/\s]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "Bolt",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(bolt)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Brave",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(brave)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Camino",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(camino)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "Chimera",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(chimera)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "Chrome",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!this.AndroidBrowser, !this.ChromeMobile]) && Asserts.one([/(?:chrome)\/(\d+(\.?_?\d+)+)/i.test(this._ua), /(chrome)\/v?([\w\.]+)/i.test(this._ua), /headlesschrome(?:\/([\w\.]+)|\s)/i.test(this._ua)]));
      }
    }, {
      key: "ChromeMobile",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/((?:android.+)crmo|crios)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Chromium",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua)]));
      }
    }, {
      key: "ComodoDragon",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(comodo_dragon)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Conkeror",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(conkeror)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "Dillo",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(dillo)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Dolphin",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/dolfin\/(\d+(\.?_?\d+)+)/i.test(this._ua), /(dolfin)\/([\w\.]+)/i.test(this._ua)]), true);
      }
    }, {
      key: "Dorado",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/Dorado WAP-Browser[/ ](\d+[\.\d]+)/i.test(this._ua)]));
      }
    }, {
      key: "Doris",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(doris)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Edge",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!this.IE]) && Asserts.one([/edg([ea])\/(\d+(\.?_?\d+)+)/i.test(this._ua), /edg([ea])\/((\d+)?[\w\.]+)/i.test(this._ua), /edg([ea])[ /](\d+[\.\d]+)/i.test(this._ua)]));
      }
    }, {
      key: "EdgeMobile",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!this.Edge]) && Asserts.one([/edgios\/(\d+(\.?_?\d+)+)/i.test(this._ua), /edgios\/((\d+)?[\w\.]+)/i.test(this._ua), /EdgiOS[ /](\d+[\.\d]+)/i.test(this._ua)]));
      }
    }, {
      key: "Electron",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([typeof window !== 'undefined' && _typeof(window.process) === 'object' && window.process.type === 'renderer', // Renderer process
        typeof process !== 'undefined' && _typeof(process.versions) === 'object' && !!process.versions.electron, // Main process
        _typeof(window.navigator) === 'object' && typeof this._ua === 'string' && this._ua.indexOf('Electron') >= 0]), false, process.versions.electron);
      }
    }, {
      key: "Epiphany",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(epiphany)\/([\w\.-]+)/i.test(this._ua)]), true);
      }
    }, {
      key: "Falkon",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(falkon)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Fennec",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(fennec)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "Firebird",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(firebird)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "Firefox",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:firefox|iceweasel)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(firefox)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "FirefoxFocus",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:focus)[\s/](\d+(?:\.\d+)+)/i.test(this._ua), /(focus)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "FirefoxMobile",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([this.FirefoxFocus, /(?:fxios)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /fxios\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Flock",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(flock)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "GoBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(gobrowser)\/?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "GoogleBot",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/googlebot\/(\d+(\.\d+))/i.test(this._ua)]));
      }
    }, {
      key: "iCab",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(icab)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "IceApe",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(iceape)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "IceBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(ice\s?browser)\/v?([\w\._]+)/i.test(this._ua)]));
      }
    }, {
      key: "IceCat",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(icecat)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "IceDragon",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(icedragon)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "Iceweasel",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(iceweasel)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "IE",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(msie|trident)/i.test(this._ua)]) && Asserts.one([/(?:ms|\()(ie)\s([\w\.]+)/i.test(this._ua), /(?:msie |rv:)(\d+(\.?_?\d+)+)/i.test(this._ua), /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i.test(this._ua)]));
      }
    }, {
      key: "IEMobile",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!this.IE]) && Asserts.one([/(iemobile)(?:browser)?[\/\s]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "Iridium",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(iridium)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Iron",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(iron)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Jasmine",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(jasmine)[\/\s]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "Konqueror",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(konqueror)\/([\w\.]+)/i.test(this._ua)]), true);
      }
    }, {
      key: "KMeleon",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(k-meleon)\/([\w\.-]+)$/i.test(this._ua)]), true);
      }
    }, {
      key: "Links",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(links)\s\(([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Linx",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(lynx)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Lunascape",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(lunascape)[\/\s]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "Maemo",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(maemo\sbrowser)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "Maxthon",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:Maxthon)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(maxthon)[\/\s]?([\w\.]*)/i.test(this._ua)]), true);
      }
    }, {
      key: "MaxthonMobile",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:mxios)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua)]), true);
      }
    }, {
      key: "Midori",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(midori)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Minimo",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(minimo)[\/\s]?([\w\.\+]+)/i.test(this._ua)]));
      }
    }, {
      key: "MIUIBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/xiaomi\/miuibrowser\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Mosaic",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(mosaic)[\/\s]([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "MZBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i.test(this._ua)]));
      }
    }, {
      key: "Netfront",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(netfront)[\/\s]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "Netscape",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(navigator|netscape)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "NetSurf",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/NetSurf(?:\/(\d+[\.\d]+))?/i.test(this._ua), /(netsurf)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "NokiaBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(nokia\s?browser)\/v?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "OmniWeb",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(omniweb)\/v?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Opera",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:opera)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(opera).+version\/([\w\.]+)/i.test(this._ua), /(opera)[\/\s]+([\w\.]+)/i.test(this._ua), /(?:opr)[\s/](\S+)/i.test(this._ua), /\s(opr)\/([\w\.]+)/i.test(this._ua)]), true);
      }
    }, {
      key: "OperaMini",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(opera\smini)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "OperaTouch",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(opt)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "OperaCoast",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:coast)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(coast)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "OperaMobile",
      get: function get() {
        // a.k.a. Opera Mobile || Opera Coast || Opera Mini || Opera Touch
        return this._checkAssertsResult(Asserts.one([this.OperaMini, this.OperaCoast, /(?:opios)[\s/](\S+)/i.test(this._ua), /(opios)[\/\s]+([\w\.]+)/i.test(this._ua), /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "OviBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(ovibrowser)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Palemoon",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(palemoon)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "Phoenix",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(phoenix)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "PhantomJS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/phantom/i.test(this._ua), /phantomjs\/(\d+(\.?_?\d+)+)/i.test(this._ua), /(phantomjs)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Polaris",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(polaris)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Puffin",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(puffin)\/([\w\.]+)/i.test(this._ua)]), true);
      }
    }, {
      key: "QQBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(qqbrowserlite)\/([\w\.]+)/i.test(this._ua), /(QQ)\/([\d\.]+)/i.test(this._ua), /m?(qqbrowser)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Quark",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(quark)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "QupZilla",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(qupzilla)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Reconq",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(rekonq)\/([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "RockMelt",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(rockmelt)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Safari",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/safari|applewebkit/i.test(this._ua), !this.AndroidBrowser, !this.SafariMobile, !this.Chrome, !this.PhantomJS]) && Asserts.one([/Version\/(\d+[\.\d]+).*Safari\/|Safari\/\d+/i.test(this._ua)]));
      }
    }, {
      key: "SafariMobile",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/iphone|ipad|ipod/i.test(this._ua), !this.AndroidBrowser, !this.Chrome, !this.PhantomJS]) && Asserts.one([/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i.test(this._ua), /(?:Version\/(\d+[\.\d]+).*)?Mobile.*Safari\//i.test(this._ua), /(?:(?:iPod|iPad|iPhone).+Version|MobileSafari)\/(\d+[\.\d]+)/i.test(this._ua)]));
      }
    }, {
      key: "Sailfish",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/sailfish\s?browser\/(\d+(\.\d+)?)/i.test(this._ua), /SailfishBrowser(?:\/(\d+[\.\d]+))?/i.test(this._ua)]));
      }
    }, {
      key: "SamsungBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua)]), true);
      }
    }, {
      key: "SeaMonkey",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/seamonkey\/(\d+(\.?_?\d+)+)/i.test(this._ua), /(seamonkey)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "Silk",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/silk\/(\d+(\.?_?\d+)+)/i.test(this._ua), /(silk)\/([\w\.-]+)/i.test(this._ua), /(kindle)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Skyfire",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(skyfire)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "Sleipnir",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(sleipnir)[\/\s]?([\w\.]+)/i.test(this._ua)]), true);
      }
    }, {
      key: "Slim",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(slim)(?:browser)?[\/\s]?([\w\.]*)/i.test(this._ua)]));
      }
    }, {
      key: "SlimerJS",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/slimerjs\/(\d+(\.?_?\d+)+)/i.test(this._ua)]));
      }
    }, {
      key: "Swing",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(?:swing)[\s/](\d+(?:\.\d+)+)/i.test(this._ua)]));
      }
    }, {
      key: "TizenBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(tizen\s?browser)\/v?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "UCBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i.test(this._ua)]), true);
      }
    }, {
      key: "Vivaldi",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/vivaldi\/(\d+(\.?_?\d+)+)/i.test(this._ua), /(vivaldi)\/([\w\.-]+)/i.test(this._ua)]));
      }
    }, {
      key: "w3m",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(w3m)[\/\s]?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Waterfox",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(waterfox)\/([\w\.-]+)$/i.test(this._ua)]));
      }
    }, {
      key: "WebOSBrowser",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(web|hpw)[o0]s/i.test(this._ua), /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i.test(this._ua)]), true);
      }
    }, {
      key: "WeChat",
      get: function get() {
        return this._checkAssertsResult(Asserts.one([/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua), /(micromessenger)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Whale",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(?:whale)[\s/](\d+(?:\.\d+)+)/i.test(this._ua)]), true);
      }
    }, {
      key: "Yandex",
      get: function get() {
        return Asserts.one([/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i.test(this._ua)]);
      }
    }, {
      key: "version",
      get: function get() {
        return this._version.replace(/_/ig, '.');
      }
    }]);

    return Browsers;
  }(FlagsClass);

  var Engines =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(Engines, _FlagsClass);

    function Engines() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'engine';

      _classCallCheck(this, Engines);

      return _possibleConstructorReturn(this, _getPrototypeOf(Engines).call(this, ua, cssFlagsPrefix));
    }

    _createClass(Engines, [{
      key: "_checkAssertsResult",
      value: function _checkAssertsResult() {
        var assertsResult = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (assertsResult) {
          this.setVersion(version);
          return true;
        }

        return false;
      }
    }, {
      key: "setVersion",
      value: function setVersion() {
        var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        this._version = version || RegExp.$1 || 'u/a';
      }
    }, {
      key: "Amaya",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(amaya)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Blink",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!!window.Intl && !!Intl.v8BreakIterator, 'CSS' in window, /webkit\/537\.36.+chrome\/(?!27)/i.test(this._ua)]));
      }
    }, {
      key: "EdgeHTML",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([!!window.StyleMedia, !this.Trident, /edge\/(\d+(\.?_?\d+)+)/i.test(this._ua) || /windows.+\sedge\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Gecko",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([typeof InstallTrigger !== 'undefined', !/like gecko/i.test(this._ua), /gecko\/(\d+(\.?_?\d+)+)/i.test(this._ua) || /rv\:([\w\.]{1,9}).+(gecko)/i.test(this._ua)]));
      }
    }, {
      key: "Goanna",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(goanna)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "iCab",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(icab)[\/\s]([23]\.[\d\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "KHTML",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(khtml)[\/\s]\(?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Links",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(links)[\/\s]\(?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Linx",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(lynx)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "NetFront",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(netfront)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "NetSurf",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(netsurf)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Presto",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/presto\/(\d+(\.?_?\d+)+)/i.test(this._ua) || /(presto)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Tasman",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(tasman)[\/\s]\(?([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "Trident",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([
        /*@cc_on!@*/
        !!document.documentMode, /trident\/(\d+(\.?_?\d+)+)/i.test(this._ua) || /(trident)[\/\s]\(?([\w\.]+)/i.test(this._ua) || /(trident)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "w3m",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([/(w3m)\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "WebKit",
      get: function get() {
        return this._checkAssertsResult(Asserts.all([typeof window.webkitConvertPointFromNodeToPage === 'function', /webkit\/(\d+(\.?_?\d+)+)/i.test(this._ua) || /(?:apple)?webkit\/([\w\.]+)/i.test(this._ua)]));
      }
    }, {
      key: "version",
      get: function get() {
        return this._version.replace(/_/ig, '.');
      }
    }]);

    return Engines;
  }(FlagsClass);

  var Features =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(Features, _FlagsClass);

    _createClass(Features, [{
      key: "isOldBrowser",
      value: function isOldBrowser() {
        return !!/(Android\s(1.|2.))|(Silk\/1.)/i.test(this._ua);
      }
    }, {
      key: "prefixes",
      value: function prefixes(prop) {
        var _document$createEleme = document.createElement('dummy'),
            style = _document$createEleme.style;

        var prefixes = ['Webkit', 'Moz', 'O', 'ms'];
        var ucProp = prop.charAt(0).toUpperCase() + prop.substr(1);
        var props = (prop + ' ' + prefixes.join(ucProp + ' ') + ucProp).split(' ');
        props.forEach(function (value, index) {
          if (style[props[value]] !== undefined) {
            return props[value];
          }

          return null;
        });
      }
    }]);

    function Features() {
      var _this;

      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'feature';

      _classCallCheck(this, Features);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Features).call(this, ua, cssFlagsPrefix));
      _this.addEventListener = _this.getAddEventListener();
      _this.asyncScript = _this.getAsyncScript();
      _this.battery = _this.getBattery();
      _this.cors = _this.getCors();
      _this.deferScript = _this.getDeferScript();
      _this.file = _this.getFile();
      _this.fileSystem = _this.getFileSystem();
      _this.fullscreen = _this.getFullscreen();
      _this.fullscreenKeyboard = _this.getFullscreenKeyboard();
      _this.geolocation = _this.getGeolocation();
      _this.historyAPI = _this.getHistoryAPI();
      _this.littleEndian = _this.getLittleEndian();
      _this.localStorage = _this.getLocalStorage();
      _this.matchMedia = _this.getMatchMedia();
      _this.querySelector = _this.getQuerySelector();
      _this.querySelectorAll = _this.getQuerySelectorAll();
      _this.serviceWorker = _this.getServiceWorker();
      _this.typedArray = _this.getTypedArray();
      _this.userMedia = _this.getUserMedia();
      _this.vibration = _this.getVibration();
      _this.worker = _this.getWorker(); // var performance = window.performance || window.mozPerformance || window.msPerformance || window.webkitPerformance || {};
      // for (var value in performance) {
      //   console.log(value);
      // }

      return _this;
    }

    _createClass(Features, [{
      key: "getAddEventListener",
      value: function getAddEventListener() {
        return !!window.addEventListener;
      }
    }, {
      key: "getAsyncScript",
      value: function getAsyncScript() {
        return 'async' in document.createElement('script');
      }
    }, {
      key: "getBattery",
      value: function getBattery() {
        return !!window.navigator.battery;
      }
    }, {
      key: "getCors",
      value: function getCors() {
        return 'XMLHttpRequest' in window && 'withCredentials' in new window.XMLHttpRequest();
      }
    }, {
      key: "getDeferScript",
      value: function getDeferScript() {
        return 'defer' in document.createElement('script');
      }
    }, {
      key: "getFile",
      value: function getFile() {
        return !!window.File && !!window.FileReader && !!window.FileList && !!window.Blob;
      }
    }, {
      key: "getFileSystem",
      value: function getFileSystem() {
        return !!window.requestFileSystem;
      }
    }, {
      key: "getFullscreen",
      value: function getFullscreen() {
        var el = document.createElement('canvas');
        return !!el.requestFullscreen || !!el.webkitRequestFullscreen || !!el.msRequestFullscreen || !!el.mozRequestFullScreen;
      }
    }, {
      key: "getFullscreenKeyboard",
      value: function getFullscreenKeyboard() {
        return window.Element && 'ALLOW_KEYBOARD_INPUT' in window.Element;
      }
    }, {
      key: "getGeolocation",
      value: function getGeolocation() {
        return 'geolocation' in window.navigator;
      }
    }, {
      key: "getHistoryAPI",
      value: function getHistoryAPI() {
        return window.history && 'pushState' in window.history;
      }
    }, {
      key: "getLittleEndian",
      value: function getLittleEndian() {
        return typeof Int8Array !== 'undefined' && new Int8Array(new Int16Array([1]).buffer)[0] > 0;
      }
    }, {
      key: "getLocalStorage",
      value: function getLocalStorage() {
        var test = 'x';

        try {
          window.localStorage.setItem(test, test);
          window.localStorage.removeItem(test);
          return true;
        } catch (err) {
          return false;
        }
      }
    }, {
      key: "getMatchMedia",
      value: function getMatchMedia() {
        return !!window.matchMedia;
      }
    }, {
      key: "getQuerySelector",
      value: function getQuerySelector() {
        return !!document.querySelector;
      }
    }, {
      key: "getQuerySelectorAll",
      value: function getQuerySelectorAll() {
        return !!document.querySelectorAll;
      }
    }, {
      key: "getServiceWorker",
      value: function getServiceWorker() {
        return 'serviceWorker' in window.navigator;
      }
    }, {
      key: "getTypedArray",
      value: function getTypedArray() {
        return typeof Int8Array !== 'undefined';
      }
    }, {
      key: "getUserMedia",
      value: function getUserMedia() {
        window.navigator.getUserMedia = window.navigator.getUserMedia || window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia || window.navigator.msGetUserMedia;
        return !!window.navigator.getUserMedia;
      }
    }, {
      key: "getVibration",
      value: function getVibration() {
        window.navigator.vibrate = window.navigator.vibrate || window.navigator.webkitVibrate || window.navigator.mozVibrate || window.navigator.msVibrate || false;
        return window.navigator.vibrate;
      }
    }, {
      key: "getWorker",
      value: function getWorker() {
        return !!window.Worker;
      }
    }, {
      key: "mspointer",
      get: function get() {
        return window.navigator.msPointerEnabled || window.navigator.pointerEnabled || false;
      }
    }, {
      key: "pixelRatio",
      get: function get() {
        return window.devicePixelRatio || 1;
      }
    }, {
      key: "pointerLock",
      get: function get() {
        return 'pointerLockElement' in document || 'mozPointerLockElement' in document || 'webkitPointerLockElement' in document;
      }
    }, {
      key: "quirksMode",
      get: function get() {
        return document.compatMode !== 'CSS1Compat';
      }
    }, {
      key: "css3D",
      get: function get() {
        var el = document.createElement('p');
        var hasCSS3D = false; // Add it to the body to get the computed style.

        document.body.insertBefore(el, null);
        ['-webkit-transform', '-o-transform', '-ms-transform', '-moz-transform', 'transform'].forEach(function (t) {
          if (!!el.style[t]) {
            el.style[t] = 'translate3d(1px,1px,1px)';
            hasCSS3D = window.getComputedStyle(el).getPropertyValue(t);
          }
        });
        document.body.removeChild(el);
        return !!hasCSS3D && hasCSS3D.length > 0 && hasCSS3D !== 'none';
      } // Test if CSS 3D transforms are supported

    }, {
      key: "css3Dtransform",
      get: function get() {
        return !this.isOldBrowser() && this.prefixes('perspective') !== null;
      } // Test if CSS transforms are supported

    }, {
      key: "cssTransform",
      get: function get() {
        return !this.isOldBrowser() && this.prefixes('transformOrigin') !== null;
      } // Test if CSS transitions are supported

    }, {
      key: "cssTransition",
      get: function get() {
        return this.prefixes('transition') !== null;
      } // Test if Device Motion is supported

    }, {
      key: "deviceMotion",
      get: function get() {
        return 'DeviceMotionEvent' in window;
      } // Test if Device Orientation is supported

    }, {
      key: "deviceOrientation",
      get: function get() {
        return 'DeviceOrientationEvent' in window;
      } // Test if Context Menu is supported

    }, {
      key: "contextMenu",
      get: function get() {
        return 'contextMenu' in document && 'HTMLMenuItemElement' in window;
      } // Test if classList API is supported

    }, {
      key: "classList",
      get: function get() {
        return 'classList' in document;
      } // Test if placeholder attribute is supported

    }, {
      key: "placeholder",
      get: function get() {
        return 'placeholder' in document.createElement('input');
      } // Test if viewport units are supported

    }, {
      key: "viewportUnit",
      get: function get() {
        var el = document.createElement('dummy');

        try {
          el.style.width = '1vw';
          var test = el.style.width !== '';
          return !!test;
        } catch (err) {
          return false;
        }
      } // Test if REM units are supported

    }, {
      key: "remUnit",
      get: function get() {
        var el = document.createElement('dummy');

        try {
          el.style.width = '1rem';
          var test = el.style.width !== '';
          return !!test;
        } catch (err) {
          return false;
        }
      } // Test if Canvas is supported

    }, {
      key: "canvas",
      get: function get() {
        var canvas = document.createElement('canvas');
        return !!(canvas.getContext && canvas.getContext('2d'));
      } // Test if SVG is supported

    }, {
      key: "svg",
      get: function get() {
        return Asserts.all([!!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect]);
      } // Test if WebGL is supported

    }, {
      key: "webGL",
      get: function get() {
        try {
          var canvas = document.createElement('canvas');
          return Asserts.one([!!window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')), !!window.WebGL2RenderingContext && canvas.getContext('webgl2')]);
        } catch (err) {
          return false;
        }
      } // Test if WebVR is supported

    }, {
      key: "webVR",
      get: function get() {
        return Asserts.all([!!('getVRDisplays' in window.navigator)]);
      } // Tests if touch events are supported, but doesn't necessarily reflect a touchscreen device

    }, {
      key: "touch",
      get: function get() {
        return ('ontouchstart' in document.documentElement || window.navigator.maxTouchPoints && window.navigator.maxTouchPoints > 1) && !!('ontouchstart' in window || window.navigator && window.navigator.msPointerEnabled && window.MSGesture || window.DocumentTouch && document instanceof window.DocumentTouch) || false;
      } // Test if img srcset attribute is supported

    }, {
      key: "srcset",
      get: function get() {
        return Asserts.all(['srcset' in document.createElement('img')]);
      } // Test if img sizes attribute is supported

    }, {
      key: "sizes",
      get: function get() {
        return Asserts.all(['sizes' in document.createElement('img')]);
      } // Test if Picture element is supported

    }, {
      key: "pictureElement",
      get: function get() {
        return Asserts.all(['HTMLPictureElement' in window]);
      } // Test if Picture element is supported

    }, {
      key: "dialogElement",
      get: function get() {
        return Asserts.all(['HTMLDialogElement' in window]);
      }
    }]);

    return Features;
  }(FlagsClass);

  var VideoFeature =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(VideoFeature, _FlagsClass);

    function VideoFeature() {
      var _this;

      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'video';

      _classCallCheck(this, VideoFeature);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoFeature).call(this, ua, cssFlagsPrefix));
      _this._videoElement = document.createElement('video');
      _this.formats = {
        mp4: _this.getMp4(),
        ogv: _this.getOgv(),
        webm: _this.getWebm()
      };
      return _this;
    }

    _createClass(VideoFeature, [{
      key: "getMp4",
      value: function getMp4() {
        return Asserts.all([this.supported, this._videoElement.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "getOgv",
      value: function getOgv() {
        return Asserts.all([this.supported, this._videoElement.canPlayType('video/ogg; codecs="theora, vorbis"').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "getWebm",
      value: function getWebm() {
        return Asserts.all([this.supported, this._videoElement.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "supported",
      get: function get() {
        return Asserts.all([!!this._videoElement, this._videoElement instanceof window.HTMLVideoElement && this._videoElement instanceof window.HTMLMediaElement, !!this._videoElement.canPlayType]);
      }
    }]);

    return VideoFeature;
  }(FlagsClass);

  var AudioFeature =
  /*#__PURE__*/
  function (_FlagsClass) {
    _inherits(AudioFeature, _FlagsClass);

    function AudioFeature() {
      var _this;

      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'audio';

      _classCallCheck(this, AudioFeature);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioFeature).call(this, ua, cssFlagsPrefix));
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      _this._audioElement = document.createElement('audio'); // Mimetypes accepted:
      //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
      //   bit.ly/iphoneoscodecs

      _this.context = _this.getContext();
      _this.formats = {
        mp3: _this.getMp3(),
        webm: _this.getWebm(),
        ogg: _this.getOgg(),
        opus: _this.getOpus(),
        wav: _this.getWav(),
        m4a: _this.getM4a()
      };
      return _this;
    }

    _createClass(AudioFeature, [{
      key: "getContext",
      value: function getContext() {
        return Asserts.all([!!window.AudioContext]);
      }
    }, {
      key: "getMp3",
      value: function getMp3() {
        return Asserts.all([this.supported, this._audioElement.canPlayType('audio/mpeg;').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "getWebm",
      value: function getWebm() {
        return Asserts.all([this.supported, this._audioElement.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "getOgg",
      value: function getOgg() {
        return Asserts.all([this.supported, this._audioElement.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "getOpus",
      value: function getOpus() {
        return Asserts.all([this.supported, this._audioElement.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "getWav",
      value: function getWav() {
        return Asserts.all([this.supported, this._audioElement.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '') !== ''], true);
      }
    }, {
      key: "getM4a",
      value: function getM4a() {
        return Asserts.all([this.supported, (this._audioElement.canPlayType('audio/x-m4a;').replace(/^no$/, '') || this._audioElement.canPlayType('audio/aac;').replace(/^no$/, '')) !== ''], true);
      }
    }, {
      key: "supported",
      get: function get() {
        return Asserts.all([!!window.Audio, !!this._audioElement, this._audioElement instanceof window.HTMLAudioElement && this._audioElement instanceof window.HTMLMediaElement, !!this._audioElement.canPlayType]);
      }
    }]);

    return AudioFeature;
  }(FlagsClass);

  var Detector =
  /*#__PURE__*/
  function () {
    function Detector() {
      var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cssFlagsPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'djs';
      var ua = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.navigator.userAgent;

      _classCallCheck(this, Detector);

      this._ua = ua;

      if (!!cssFlags) {
        this._cssFlags = [];
        this._cssFlagsPrefix = cssFlagsPrefix + (!!cssFlagsPrefix ? '--' : '');
      } //! Hardware


      this.hardware = {
        cpu: this.getCPU(cssFlags),
        gpu: this.getGPU(cssFlags)
      }; //! Software

      this.os = this.getOS(cssFlags);
      this.platform = this.getPlatform(cssFlags);
      this.browser = this.getBrowsers(cssFlags);
      this.engines = this.getEngines(cssFlags); //! Features

      this.features = this.getFeatures(cssFlags);

      if (!!cssFlags) {
        this.setCssFlags();
      }

      console.warn('DetectorJS initialized', this);
    }

    _createClass(Detector, [{
      key: "getCPU",
      value: function getCPU() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var cpu = new CPU(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(cpu.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return cpu.toFlags();
      }
    }, {
      key: "getGPU",
      value: function getGPU() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var gpu = new GPU(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(gpu.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return gpu.toFlags();
      }
    }, {
      key: "getOS",
      value: function getOS() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var os = new OS(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(os.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return os.toFlags();
      }
    }, {
      key: "getEngines",
      value: function getEngines() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var engines = new Engines(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(engines.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return engines.toFlags();
      }
    }, {
      key: "getBrowsers",
      value: function getBrowsers() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var browsers = new Browsers(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(browsers.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return browsers.toFlags();
      }
    }, {
      key: "getFeatures",
      value: function getFeatures() {
        var cssFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var features = new Features(this._ua);
        var video = new VideoFeature(this._ua);
        var audio = new AudioFeature(this._ua);

        try {
          if (!!cssFlags) {
            this._cssFlags = this._cssFlags.concat(features.toCssFlags(), video.toCssFlags(), audio.toCssFlags());
          }
        } catch (e) {
          throw e;
        }

        return features.toFlags().merge({
          video: video.toFlags(),
          audio: audio.toFlags()
        });
      }
    }, {
      key: "getPlatform",
      value: function getPlatform() {
        var p = {};

        try {
        } catch (e) {
          throw e;
        }

        return p;
      } // getOS(cssFlags = false) {
      //   const o = {};
      //   try {
      //     // o = merge(o, {
      //     // architecture: platform.os.architecture === 32 ? 'x86' : 'x64',
      //     // name: platform.os.family,
      //     // version: platform.os.version || userAgent.osversion,
      //     // android: userAgent.android, //&& platform.os.family === 'Android',
      //     // bada: userAgent.bada,
      //     // blackberry: userAgent.blackberry,
      //     // chromeOS: userAgent.chromeos,
      //     // firefoxOS: userAgent.firefoxos,
      //     // iOS: userAgent.ios, // && platform.os.family === 'iOS',
      //     // linux: userAgent.linux, //&& ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE'].includes(platform.os.family),
      //     // macOS: /Mac OS/.test(navigator.UserAgent), // && userAgent.mac && ['OS X', 'macOS'].includes(platform.os.family),
      //     // sailfish: userAgent.sailfish,
      //     // tizen: userAgent.tizen,
      //     // windows: userAgent.windows, // && ['Windows', 'Windows Server 2008 R2 / 7', 'Windows Server 2008 / Vista', 'Windows XP'].includes(platform.os.family),
      //     // windowsPhone: userAgent.windowsphone, // && platform.os.family === 'Windows Phone',
      //     // });
      //     if (!!cssFlags) {
      //       // !!o.android && this._cssFlags.push('os-android');
      //       // !!o.bada && this._cssFlags.push('os-bada');
      //       // !!o.blackberry && this._cssFlags.push('os-blackberry');
      //       // !!o.chromeOS && this._cssFlags.push('os-chromeos');
      //       // !!o.firefoxOS && this._cssFlags.push('os-firefoxos');
      //       // !!o.iOS && this._cssFlags.push('os-ios');
      //       // !!o.linux && this._cssFlags.push('os-linux');
      //       // !!o.macOS && this._cssFlags.push('os-macos');
      //       // !!o.sailfish && this._cssFlags.push('os-sailfish');
      //       // !!o.tizen && this._cssFlags.push('os-tizen');
      //       // !!o.windows && this._cssFlags.push('os-windows');
      //       // !!o.windowsPhone && this._cssFlags.push('os-windowsphone');
      //       // !!o.version && this._cssFlags.push('os-version-' + o.version);
      //     }
      //   } catch (e) {
      //     throw e;
      //   }
      //   return o;
      // }

    }, {
      key: "getBrowser",
      value: function getBrowser() {
        var b = {};

        try {
        } catch (e) {
          throw e;
        }

        return b;
      }
    }, {
      key: "setCssFlags",
      value: function setCssFlags() {
        var _this = this;

        var cssFlagsPrefixed = this._cssFlags.map(function (cssFlag) {
          return _this._cssFlagsPrefix + cssFlag;
        });

        if (!!document.documentElement.classList) {
          var _document$documentEle;

          (_document$documentEle = document.documentElement.classList).add.apply(_document$documentEle, _toConsumableArray(cssFlagsPrefixed));
        } else {
          cssFlagsPrefixed.forEach(function (cssFlag) {
            return document.documentElement.className.replace(cssFlag, '');
          });
          document.documentElement.className += this._cssFlags.join(' ').trim();
        }
      }
    }]);

    return Detector;
  }();

  return Detector;

}));
